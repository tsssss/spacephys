;+
; read info in the log file, use the info to calc Poynting flux, and to 
; plot other data. Save plots into pdf files, save data into tplot file.
;-
pro cusp_save_plot_and_data, eventid, reload = reload, save_data = save_data, no_plot = no_plot, test = test
    
    ; read info out of the log file.
    rootdir = shomedir()+'/Google Drive/works'
    if file_test(rootdir) eq 0 then rootdir = sdiskdir('Research')
    
    logfile = rootdir+'/works/cusp/cusp_list_of_conjun_9_10_all.log'
    loginfo = cusp_read_conjun_list(logfile, event = eventid)
    if size(loginfo,/type) ne 8 then begin
        print, 'no id found ...'
        return
    endif
    
    
    ; directory to save output data and pdfs.
    figdir = rootdir+'/works/cusp/cusp list conjun'
    datdir = rootdir+'/data/cusp'

    if keyword_set(test) then begin
        figdir = shomedir()+'/cusp'
        datdir = shomedir()+'/cusp/data'
    endif
    
    if ~file_test(figdir,/directory) then file_mkdir, figdir
    

    ; reload and recalc data?
    if (tnames('*'))[0] eq '' then reload = 1   ; no data loaded.
    get_data, 'scidat', t0, info
    if size(dat,/type) eq 8 then if eventid ne info.id then reload = 1   ; new.
    
    

; **** basic info for both loading data and plotting.
    potr = loginfo.polar.plot_time
    fatr = loginfo.fast.plot_time
    potrcusp = loginfo.polar.cusp_time
    fatrcusp = loginfo.fast.cusp_time
    if potr[1] lt potr[0] then potr[1]+= 86400d
    if fatr[1] lt fatr[0] then fatr[1]+= 86400d
    if potrcusp[1] lt potrcusp[0] then potrcusp[1]+= 86400d
    if fatrcusp[1] lt fatrcusp[0] then fatrcusp[1]+= 86400d
    id = loginfo.id

    ; filters, min to max, uniq.
    ; Will take the minimum and maximum filters as noise delimiters,
    ; if delimiters are excplitly set, then use them.
    ; Will take the second large filter as delimiter for fac and wave,
    ; if fac delimiter is set, then use it.

    ; filt0, original filter: f1,f2,f3,f4.
    ; We also want to include 0 and infinity (maxf).
    ;
    ; delims, rule out noise: n1, n2.
    ;
    ; Say n1=f2, n2=f4, the wanted filters are f2, f3, f4, ie, f1',f2',f3'.
    ; The filters used to filter mat spectrogram are: 0,f1',f2',f3',maxf.
    ; There are 5 filters, 4 bands, among the bands, 3 are wanted.
    ; High freq noise band is 0-f1', low freq noise band is f3'-maxf.
    ;
    ; faclim, sets where fac bands are.
    ; Say faclim=f2', then f1'-faclim are wave bands, faclim-f3' are fac bands.

    maxfilt = 1e31

    ; polar.
    pofilt0 = loginfo.polar.filters     ; original filters.
    pofaclim = loginfo.polar.faclim     ; above is fac.
    podelims = loginfo.polar.noisedelim ; below and above are noise.
    if (where(podelims lt 0))[0] eq -1 then podelims = minmax(podelims) ; sort if no -1.

    ; sort from small to large.
    pofilts = pofilt0
    pofilts = pofilts[sort(pofilts)]
    pofilts = pofilts[uniq(pofilts)]
    if pofilts[0] ne 0 then pofilts = [0,pofilts]   ; auto fill 0.

    ; default setting: [0,max original filters].
    if podelims[0] lt 0 then podelims[0] = min(pofilts)
    if podelims[1] lt 0 then podelims[1] = maxfilt
    
    ; 2016-06-27, add this block to shrink polar's w-k space.
    podelims[0] = min(loginfo.fast.filters)* $
        abs(potrcusp[1]-potrcusp[0])/abs(fatrcusp[1]-fatrcusp[0])
;    podelims[1] = max(loginfo.fast.filters)* $
;        abs(potrcusp[1]-potrcusp[0])/abs(fatrcusp[1]-fatrcusp[0])

    ; get the wanted filters, add noise delimiters, and fac limit.
    idx = where(pofilts ge podelims[0] and pofilts le podelims[1], ponfilt)
    if ponfilt eq 0 then begin  ; delimiters are too close.
        idx = where(pofilts ge podelims[0]) ; choose the band includes the smaller delimiter.
        if idx[0] eq 0 then begin
            pofilts = [0,pofilts[idx[0]]]
        endif else begin
            pofilts = pofilts[idx[0]-1:idx[0]]
        endelse
    endif else pofilts = pofilts[idx]
    if min(pofilts) gt podelims[0] then pofilts = [podelims[0],pofilts]
    if max(pofilts) lt podelims[1] then pofilts = [pofilts,podelims[1]]
    
    ; use faclim to omit unecessary filters.
    if pofaclim lt 0 then pofaclim = pofilts[n_elements(pofilts)-2]
    if pofaclim gt podelims[1] then pohasfac = 0 else begin
        pohasfac = 1
        pofacidx = where(pofilts lt pofaclim, cnt)
        if cnt ne 0 then pofilts = [pofilts[pofacidx],pofaclim,max(pofilts)]
    endelse

    ; includes wave bands and fac (if pohasfac=1).
    ponfilt = n_elements(pofilts)

    ; the filters used in filtering in mat spectrogram.
    pomatfilts = pofilts
    if min(pomatfilts) gt 0 then begin
        pomatfilts = [0,pomatfilts]
        pohashighnoise = 1
    endif else pohashighnoise = 0
    if max(pomatfilts) lt maxfilt then begin
        pomatfilts = [pomatfilts,maxfilt]
        pohaslownoise = 1
    endif else pohaslownoise = 0
    ponmatband = n_elements(pomatfilts)-1
    pomatbandids = string(indgen(ponmatband),format='(I0)')

    ; the wanted bands are within the wanted filters.
    ponband = ponfilt-1     ; includes wave bands and fac, separate later.
    pobandids = 'b'+string(indgen(ponband),format='(I0)')    ; in var name.
    pobandlabels = strarr(ponband)
    for i = 0, ponband-1 do pobandlabels[i] = $
        sgnum2str(pofilts[i],msgn=3)+'-'+sgnum2str(pofilts[i+1],msgn=3)+'s'


    ; fast.
    fafilt0 = loginfo.fast.filters     ; original filters.
    fafaclim = loginfo.fast.faclim     ; above is fac.
    fadelims = loginfo.fast.noisedelim ; below and above are noise.
    if (where(fadelims lt 0))[0] eq -1 then fadelims = minmax(fadelims) ; sort if no -1.

    ; sort from small to large.
    fafilts = fafilt0
    fafilts = fafilts[sort(fafilts)]
    fafilts = fafilts[uniq(fafilts)]
    if fafilts[0] ne 0 then fafilts = [0,fafilts]   ; auto fill 0.

    ; default setting: [0,max original filters].
    if fadelims[0] lt 0 then fadelims[0] = min(fafilts)
    if fadelims[1] lt 0 then fadelims[1] = maxfilt

    ; get the wanted filters, add noise delimiters, and fac limit.
    idx = where(fafilts ge fadelims[0] and fafilts le fadelims[1], fanfilt)
    fafilts = fafilts[idx]
    if min(fafilts) gt fadelims[0] then fafilts = [fadelims[0],fafilts]
    if max(fafilts) lt fadelims[1] then fafilts = [fafilts,fadelims[1]]
    
    ; use faclim to omit unecessary filters.
    if fafaclim lt 0 then fafaclim = fafilts[n_elements(fafilts)-2]
    if fafaclim gt fadelims[1] then fahasfac = 0 else begin
        fahasfac = 1
        fafacidx = where(fafilts lt fafaclim)
        fafilts = [fafilts[fafacidx],fafaclim,max(fafilts)]
    endelse

    ; includes wave bands and fac (if fahasfac=1).
    fanfilt = n_elements(fafilts)

    ; the filters used in filtering in mat spectrogram.
    famatfilts = fafilts
    if min(famatfilts) gt 0 then begin
        famatfilts = [0,famatfilts]
        fahashighnoise = 1
    endif else fahashighnoise = 0
    if max(famatfilts) lt maxfilt then begin
        famatfilts = [famatfilts,maxfilt]
        fahaslownoise = 1
    endif else fahaslownoise = 0
    
    ; 2016-06-29. set FAST upper limit to match Polar but smaller than data length.
    famatfilts[-1] = max(pofilts[where(pofilts ne maxfilt)]) < abs(fatr[1]-fatr[0])

    
    fanmatband = n_elements(famatfilts)-1
    famatbandids = string(indgen(fanmatband),format='(I0)')

    ; the wanted bands are within the wanted filters.
    fanband = fanfilt-1     ; includes wave bands and fac, separate later.
    fabandids = 'b'+string(indgen(fanband),format='(I0)')    ; in var name.
    fabandlabels = strarr(fanband)
    for i = 0, fanband-1 do fabandlabels[i] = $
        sgnum2str(fafilts[i],msgn=3)+'-'+sgnum2str(fafilts[i+1],msgn=3)+'s'



    ; the wanted component, 0-based counting.
    deidx = 0   ; dEv.
    dbidx = 1   ; dBp.
    pfidx = 2   ; Sb.
    dematsuf = '_comp'+string(deidx,format='(I0)')
    dbmatsuf = '_comp'+string(dbidx,format='(I0)')
    
    ndim = 3    ; 3-d fields.
    
    
; **** plot settings and generate plots to disk.
    posl = [0.1,0.10,0.40,0.90]
    posr = [0.6,0.10,0.90,0.90]
    faclabs = ['v','p','b']
    falabs = 'fa_'+['ilat','mlt','dis']
    polabs = 'po_'+['ilat','mlt','dis']
    rgb = [6,4,2] & red = 6
    ct = 43
    charsz = 1
    !p.font = 1
    tplot_options, 'ygap', 0.25
    tplot_options, 'ynozero', 1
    tplot_options, 'version', 2
    tplot_options, 'num_lab_min', 8
    tplot_options, 'labflag', 1
    tplot_options, 'charsize', charsz*0.9
    tplot_options, 'xcharsize', charsz*0.7
    tplot_options, 'ycharsize', charsz*0.8
    tplot_options, 'zcharsize', charsz*0.6
    tplot_options, 'constant', 0
    time_stamp, /off


; **** calculate all data and save to tplot.
    ; poynting flux, KE flux, integrated fluxes.
    if keyword_set(reload) then begin
        store_data, '*', /delete

    ; **** data structure.
        info = cusp_info_struct()

        ; dst, ae, imf bz, by.
        conjtr = minmax([potrcusp,fatrcusp])
        dt = 0 & conjtr[0]-= dt & conjtr[1]+= dt    ; allow a padding time.
        tmp = sread_omni(conjtr)
        tmp2 = sfmepoch(tmp.epoch,'unix')
        idx = where(tmp2 ge conjtr[0] and tmp2 le conjtr[1])
        info.ae = max(tmp.ae[idx])
        info.dst = min(tmp.symh[idx])
        info.imfbz = minmax(tmp.bgse[*,2])
        info.imfby = minmax(tmp.bgse[*,1])

        info.id = id
        info.conjtr = conjtr

        info.polar.cusp.entry.ut = potrcusp[0]
        info.polar.cusp.exit.ut = potrcusp[1]
        info.polar.filters = pofilt0
        info.polar.nfilter = n_elements(pofilt0)
        info.polar.faclimit = pofaclim
        info.polar.noisedelim = podelims

        info.fast.cusp.entry.ut = fatrcusp[0]
        info.fast.cusp.exit.ut = fatrcusp[1]
        info.fast.filters = fafilt0
        info.fast.nfilter = n_elements(fafilt0)
        info.fast.faclimit = fafaclim
        info.fast.noisedelim = fadelims
        

    ; **** read polar data.
        poinfo = loginfo.polar

        ; kinetic energy flux.
        ; po_[ion,ele]_keflux.
        fn = rootdir+'/works/cusp/cusp list conjun/'+id+'/'+id+'_ke_special.svg'
        yrange = poinfo.keflux    ; [ele,ion].
        type = poinfo.ketype   ; etp,p2p,ptp.
        case type of
            'etp':ex = {epstopdf:1}
            'ptp':ex = {pstopdf:1}
            'p2p':ex = {ps2pdf:1}
        endcase
        polar_read_ke_flux, fn, potr, yrange[0]*[-1,1], yrange[1]*[-1,1], _extra = ex

        ; field data.
        ; po_[de,db]_fac, original field.
        fn = rootdir+'/data/cusp/po_sdt_fld_'+id+'.sdt'
        polar_sdt_prep_poynting_flux, fn, e56 = poinfo.e56, tr = potr, eventid = id, $
            cusptr = potrcusp, orootdir = figdir+'/'+id, titpre = 'Event ID: '+id+'    '
        vars = ['po_b','po_b0_spc','po_spc2fac','po_db_spc','po_de_spc','po_mlat']
        store_data, vars, /delete

        ; poynting flux.
        ; po_[de,db]_fac_mat, 3-D fields used in Poynting flux calc.
        ; po_[de,db]_fac_mat[1,2,3,...], 3-D fields in freq bands.
        dename = 'po_de_fac' & dbname = 'po_db_fac' & pfname = 'po_pf_fac'
        stplot_calc_pflux_mat, dename, dbname, pfname, tscale = potscl, $
            filter = pomatfilts, ids = pomatbandids, scaleinfo = poinfo.scaleinfo

        ; group poynting flux into bands.
        ; high freq noise band.
        vars = [dename,dbname,pfname]+'_mat'
        nvar = n_elements(vars)
        for i = 0, nvar-1 do begin
            tvar = vars[i]+'_nh' 
            if pohashighnoise then begin
                stplot_renew, vars[i]+pomatbandids[0], newname = tvar, /delete
            endif else store_data, tvar, potr, dblarr(2,3)
        endfor
        ; low freq noise band.
        for i = 0, nvar-1 do begin
            tvar = vars[i]+'_nl' 
            if pohaslownoise then begin
                stplot_renew, vars[i]+pomatbandids[ponmatband-1], newname = tvar, /delete
            endif else store_data, tvar, potr, dblarr(2,3)
        endfor
        ; wave bands.
        for i = 0, nvar-1 do begin
            tvar = vars[i]+'_'+pobandids
            for j = 0, ponband-1 do stplot_renew, $
                vars[i]+pomatbandids[pohashighnoise+j], newname = tvar[j], /delete
        endfor
        ; remove background for the lowest freq wave band.
        vars = [dename,dbname]+'_mat'
        nvar = n_elements(vars)
        for i = 0, nvar-1 do begin
            tvar = vars[i]+'_'+pobandids[ponband-1]
            get_data, tvar, t0, dat
            bg = scalcbg(dat)
            store_data, tvar, t0, dat-bg
            tvar = vars[i]+'_nl'
            if pohaslownoise then begin
                get_data, tvar, t0, dat
                store_data, tvar, t0, dat+bg
            endif else store_data, tvar, t0, bg
        endfor
        ; update poynting flux
        tmp = '_mat_'+pobandids[ponband-1]
        stplot_calc_pflux_mat, dename+tmp, dbname+tmp, pfname+tmp
        ; total used field, exclude low and high freq noise.
        vars = [dename,dbname,pfname]+'_mat'
        nvar = n_elements(vars)
        for i = 0, nvar-1 do begin
            tvar = vars[i]+['_'+pobandids]
            if pohasfac then tvar = vars[i]+['_'+pobandids[0:ponband-2]]    ; exclude fac band.
            stplot_total, tvar, newname = vars[i]
        endfor

        ; for all energy fluxes, map and integrate.
        ; flux -> flux_map.
        vars = ['po_'+['ele_keflux','ion_keflux','pf_fac_mat'+['','_'+pobandids]]]
        for j = 0, n_elements(vars)-1 do begin
            smap2iono, vars[j], 'po_dis', newname = vars[j]+'_map'
            cusp_int_eflux, vars[j]+'_map', 'po_ilat', tr = potrcusp
        endfor
        ; store parallel poynting flux.
        pfvars = ['po_pf_fac_mat'+['','_map']]
        for j = 0, n_elements(pfvars)-1 do begin
            get_data, pfvars[j], t0, tmp, tmp2
            idx = (n_elements(tmp2) eq 1)? 0: 2
            store_data, pfvars[j]+'_para', t0, tmp[*,2], tmp2[idx], $
                limits = {ytitle:'(mW/m!U2!N)',labels:'S!D||!N'}
        endfor
        stplot_renew, 'po_pf_fac_mat_map_para', $
            newname = 'po_pf_fac_mat_para_map', /delete


    ; **** read fast data.
        fainfo = loginfo.fast

        ; kinetic energy flux.
        ; fa_[ion,ele]_keflux.
        fn = rootdir+'/data/cusp/fa_sdt_esa_'+id+'_'+ $
            string(fainfo.orbit,format='(I05)')+'.tplot'
        tplot_restore, filename = fn
        stplot_renew, 'ele_eflux', newname = 'fa_ele_keflux', /delete
        stplot_renew, 'ion_eflux', newname = 'fa_ion_keflux', /delete
        vars = ['ion_*','ele_*']
        store_data, vars, /delete
        ; despike for ion ke. !!! need better despike algorithm.
        get_data, 'fa_ion_keflux', t0, dat
        idx = where(abs(dat) le 1, cnt)
        store_data, 'fa_ion_keflux', t0, interpol(dat[idx],t0[idx],t0)

        ; field data.
        ; fa_[de,db]_fac, original field.
        fn = rootdir+'/data/cusp/fa_sdt_fld_'+id+'_'+ $
            string(fainfo.orbit,format='(I05)')+'.tplot'
        if file_search(fn) eq '' then $
            fn = rootdir+'/data/cusp/fa_sdt_fld_'+id+'_'+$
            string(fainfo.orbit,format='(I05)')+'.tplot'
        fast_sdt_prep_poynting_flux, fn, $  ; plot time add padding time.
            trplot = fatr+(fatr[1]-fatr[0])*[-1,1]
        vars = ['fa_pos','fa_vel','fa_alt','alt','fa_b0_gei','fa_b0_gei','fa_b']
        store_data, vars, /delete

        ; poynting flux.
        ; fa_[de,db]_fac_mat, 3-D fields used in poynting flux calc.
        ; fa_[de,db]_fac_matf[1,2,3,...], 3-D fields in freq bands.
        dename = 'fa_de_fac' & dbname = 'fa_db_fac' & pfname = 'fa_pf_fac'
        stplot_calc_pflux_mat, dename, dbname, pfname, tscale = fatscl, $
            filter = famatfilts, ids = famatbandids, scaleinfo = fainfo.scaleinfo

        ; group poynting flux into bands.
        ; high freq noise band.
        vars = [dename,dbname,pfname]+'_mat'
        nvar = n_elements(vars)
        for i = 0, nvar-1 do begin
            tvar = vars[i]+'_nh' 
            if fahashighnoise then begin
                stplot_renew, vars[i]+famatbandids[0], newname = tvar, /delete
            endif else store_data, tvar, fatr, dblarr(2,3)
        endfor
        ; low freq noise band.
        for i = 0, nvar-1 do begin
            tvar = vars[i]+'_nl' 
            if fahaslownoise then begin
                stplot_renew, vars[i]+famatbandids[fanmatband-1], newname = tvar, /delete
            endif else store_data, tvar, fatr, dblarr(2,3)
        endfor
        ; wave bands.
        for i = 0, nvar-1 do begin
            tvar = vars[i]+'_'+fabandids
            for j = 0, fanband-1 do stplot_renew, $
                vars[i]+famatbandids[fahashighnoise+j], newname = tvar[j], /delete
        endfor
        ; remove background for the lowest freq wave band.
        vars = [dename,dbname]+'_mat'
        nvar = n_elements(vars)
        for i = 0, nvar-1 do begin
            tvar = vars[i]+'_'+fabandids[fanband-1]
            get_data, tvar, t0, dat
            bg = scalcbg(dat)
            store_data, tvar, t0, dat-bg
            tvar = vars[i]+'_nl'
            if fahaslownoise then begin
                get_data, tvar, t0, dat
                store_data, tvar, t0, dat+bg
            endif else store_data, tvar, t0, bg
        endfor
        ; update poynting flux
        tmp = '_mat_'+fabandids[fanband-1]
        stplot_calc_pflux_mat, dename+tmp, dbname+tmp, pfname+tmp
        ; total used field, exclude low and high freq noise.
        vars = [dename,dbname,pfname]+'_mat'
        nvar = n_elements(vars)
        for i = 0, nvar-1 do begin
            tvar = vars[i]+['_'+fabandids]
            if fahasfac then tvar = vars[i]+['_'+fabandids[0:fanband-2]]    ; exclude fac band.
            stplot_total, tvar, newname = vars[i]
        endfor

        ; for all energy fluxes, map and integrate.
        ; flux -> flux_map.
        vars = ['fa_'+['ele_keflux','ion_keflux','pf_fac_mat'+['','_'+fabandids]]]
        for j = 0, n_elements(vars)-1 do begin
            smap2iono, vars[j], 'fa_dis', newname = vars[j]+'_map'
            cusp_int_eflux, vars[j]+'_map', 'fa_ilat', tr = fatrcusp
        endfor
        ; store parallel poynting flux.
        pfvars = ['fa_pf_fac_mat'+['','_map']]
        for j = 0, n_elements(pfvars)-1 do begin
            get_data, pfvars[j], t0, tmp, tmp2
            idx = (n_elements(tmp2) eq 1)? 0: 2
            store_data, pfvars[j]+'_para', t0, tmp[*,2], tmp2[idx], $
                limits = {ytitle:'(mW/m!U2!N)',labels:'S!D||!N'}
        endfor
        stplot_renew, 'fa_pf_fac_mat_map_para', $
            newname = 'fa_pf_fac_mat_para_map', /delete


    ; **** fill info structure.
        ; polar.
        pre = 'po_'
        trcusp = potrcusp
        get_data, pre+'ilat', t0, dat
        info.polar.cusp.entry.ilat = interpol(dat,t0,trcusp[0])
        info.polar.cusp.exit.ilat = interpol(dat,t0,trcusp[1])
        get_data, pre+'mlt', t0, dat
        info.polar.cusp.entry.mlt = interpol(dat,t0,trcusp[0])
        info.polar.cusp.exit.mlt = interpol(dat,t0,trcusp[1])
        get_data, pre+'dis', t0, dat
        info.polar.cusp.entry.dis = interpol(dat,t0,trcusp[0])
        info.polar.cusp.exit.dis = interpol(dat,t0,trcusp[1])
    
        hem = info.polar.cusp.entry.ilat & hem = hem/abs(hem)
        info.polar.hem = hem
    
        get_data, pre+'ele_keflux_map', tmp, tmp2, dat
        info.polar.kee = dat
        get_data, pre+'ion_keflux_map', tmp, tmp2, dat
        info.polar.kei = dat
    
        pfbands = dblarr(ponband,3)
        for i = 0, ponband-1 do begin
            suf = '_'+pobandids[i]
            get_data, pre+'pf_fac_mat'+suf+'_map', tmp, tmp2, dat
            pfbands[i,*] = dat
            tmp = stplot_ebratio(pre+'de_fac_mat'+suf, pre+'db_fac_mat'+suf, $
                deidx = deidx, dbidx = dbidx, trange = potrcusp, method = 'minmax')
            info.polar.ebratio[i,*] = tmp[*]
            info.polar.pfstar[i] = stplot_pfstar(pre+'de_fac_mat'+suf, pre+'db_fac_mat'+suf, trange = potrcusp)
        endfor
        info.polar.sv.fs = pfbands[*,0]
        info.polar.sp.fs = pfbands[*,1]
        info.polar.sb.fs = pfbands[*,2]
        if pohasfac then begin
            info.polar.sv.fh = total(pfbands[0:ponband-2,0])
            info.polar.sp.fh = total(pfbands[0:ponband-2,1])
            info.polar.sb.fh = total(pfbands[0:ponband-2,2])
            info.polar.sv.fl = total(pfbands[ponband-1:*,0])
            info.polar.sp.fl = total(pfbands[ponband-1:*,1])
            info.polar.sb.fl = total(pfbands[ponband-1:*,2])
        endif else begin
            info.polar.sv.fh = total(pfbands[*,0])
            info.polar.sp.fh = total(pfbands[*,1])
            info.polar.sb.fh = total(pfbands[*,2])
            info.polar.sv.fl = 0d
            info.polar.sp.fl = 0d
            info.polar.sb.fl = 0d
        endelse
    
        ; ion ratio.
        get_data, pre+'ion_keflux_map', tmp, tmp2
        info.max_kei = abs(min(hem*tmp2[where(tmp ge potrcusp[0] and tmp le potrcusp[1])]))

        vars = pre+'ion_keflux_map_abs'
        store_data, vars, tmp, abs(tmp2)
        cusp_int_eflux, vars, pre+'ilat', tr = potrcusp
        get_data, vars, tmp, tmp2, dat
        info.ratio_ion = info.polar.kei/dat  ; -1 for all upward, 1 for all down.
    
        ; fast.
        pre = 'fa_'
        trcusp = fatrcusp
        get_data, pre+'ilat', t0, dat
        info.fast.cusp.entry.ilat = interpol(dat,t0,trcusp[0])
        info.fast.cusp.exit.ilat = interpol(dat,t0,trcusp[1])
        get_data, pre+'mlt', t0, dat
        info.fast.cusp.entry.mlt = interpol(dat,t0,trcusp[0])
        info.fast.cusp.exit.mlt = interpol(dat,t0,trcusp[1])
        get_data, pre+'dis', t0, dat
        info.fast.cusp.entry.dis = interpol(dat,t0,trcusp[0])
        info.fast.cusp.exit.dis = interpol(dat,t0,trcusp[1])
    
        hem = info.fast.cusp.entry.ilat & hem = hem/abs(hem)
        info.fast.hem = hem
    
        get_data, pre+'ele_keflux_map', tmp, tmp2, dat
        info.fast.kee = dat
        get_data, pre+'ion_keflux_map', tmp, tmp2, dat
        info.fast.kei = dat
    
        pfbands = dblarr(fanband,3)
        for i = 0, fanband-1 do begin
            suf = '_'+fabandids[i]
            get_data, pre+'pf_fac_mat'+suf+'_map', tmp, tmp2, dat
            pfbands[i,*] = dat
            tmp = stplot_ebratio(pre+'de_fac_mat'+suf, pre+'db_fac_mat'+suf, $
                deidx = deidx, dbidx = dbidx, trange = fatrcusp, method = 'minmax')
            info.fast.ebratio[i,*] = tmp[*]
            info.fast.pfstar[i] = stplot_pfstar(pre+'de_fac_mat'+suf, pre+'db_fac_mat'+suf, trange = fatrcusp)
        endfor

        info.fast.sv.fs = pfbands[*,0]
        info.fast.sp.fs = pfbands[*,1]
        info.fast.sb.fs = pfbands[*,2]
        if fahasfac then begin
            info.fast.sv.fh = total(pfbands[0:fanband-2,0])
            info.fast.sp.fh = total(pfbands[0:fanband-2,1])
            info.fast.sb.fh = total(pfbands[0:fanband-2,2])
            info.fast.sv.fl = total(pfbands[fanband-1:*,0])
            info.fast.sp.fl = total(pfbands[fanband-1:*,1])
            info.fast.sb.fl = total(pfbands[fanband-1:*,2])
        endif else begin
            info.fast.sv.fh = total(pfbands[*,0])
            info.fast.sp.fh = total(pfbands[*,1])
            info.fast.sb.fh = total(pfbands[*,2])
            info.fast.sv.fl = 0d
            info.fast.sp.fl = 0d
            info.fast.sb.fl = 0d
        endelse

        ; convert to up/down, + is down, - is up. It's a rotation around v-axis.
        if hem lt 0 then begin
            info.ratio_ion*= -1
    
            info.polar.kei*= -1
            info.polar.kee*= -1
            info.polar.sb.fs*= -1
            info.polar.sb.fh*= -1
            info.polar.sb.fl*= -1
            info.polar.sp.fs*= -1
            info.polar.sp.fh*= -1
            info.polar.sp.fl*= -1
    
            info.fast.kei*= -1
            info.fast.kee*= -1
            info.fast.sb.fs*= -1
            info.fast.sb.fh*= -1
            info.fast.sb.fl*= -1
            info.fast.sp.fs*= -1
            info.fast.sp.fh*= -1
            info.fast.sp.fl*= -1
        endif

        ; relative position.
        info.dt = (info.fast.cusp.entry.ut-info.polar.cusp.entry.ut)/3600d
        info.dmlt = (info.fast.cusp.entry.mlt+info.fast.cusp.exit.mlt)*0.5-$
            (info.polar.cusp.entry.mlt+info.polar.cusp.exit.mlt)*0.5
        info.dr = (info.polar.cusp.entry.dis+info.polar.cusp.exit.dis)*0.5-$
            (info.fast.cusp.entry.dis+info.fast.cusp.exit.dis)*0.5

        ; efluxes.
        info.polar.pflux = info.polar.sb.fh;+info.polar.sb.fl
        info.fast.pflux = info.fast.sb.fh;+info.fast.sb.fl
        info.polar.eflux = info.polar.kei+info.polar.kee+info.polar.pflux
        info.fast.eflux = info.fast.kei+info.fast.kee+info.fast.pflux
        info.ratio_pflux = info.polar.pflux/info.fast.pflux
        info.ratio_eflux = info.polar.eflux/info.fast.eflux
    
        ; Alfven speed.
        if info.polar.cusp.entry.ilat gt info.polar.cusp.exit.ilat then begin
            ilat = info.polar.cusp.exit.ilat
            dis = info.polar.cusp.exit.dis
        endif else begin
            ilat = info.polar.cusp.entry.ilat
            dis = info.polar.cusp.entry.dis
        endelse
        info.polar.va = smodelva(ilat, dis)
    
        if info.fast.cusp.entry.ilat gt info.fast.cusp.exit.ilat then begin
            ilat = info.fast.cusp.exit.ilat
            dis = info.fast.cusp.exit.dis
        endif else begin
            ilat = info.fast.cusp.entry.ilat
            dis = info.fast.cusp.entry.dis
        endelse
        info.fast.va = smodelva(ilat, dis)
    
        store_data, 'scidat', sfmdate(id,'%Y_%m%d_%H UT'), info

    endif


; **** save data to disk.
    ; save labels, de_fac, db_fac, pf_fac_mat,
    ; ele_keflux, ion_keflux, pf_fac_mat_para in situ and mapped.
    ; save event info to (1) include other info and (2) info for recovering
    ; quantities are not saved (e.g., mat spectrograms, fields in freq bands).
    if keyword_set(save_data) then begin
        tmp = ['ele_keflux','ion_keflux','pf_fac_mat_para']
        vars = ['ilat','mlt','dis','de_fac','db_fac','pf_fac_mat',tmp,tmp+'_map']
        vars = ['po_'+vars,'fa_'+vars,'scidat']
        store_data, 'event_info', potr[0], loginfo
        vars = [vars,'event_info']
        ofn = datdir+'/'+id+'_all_data'
        tmp = file_dirname(ofn)
        if ~file_test(tmp,/directory) then file_mkdir, tmp
        tplot_save, vars, filename = ofn
    endif
    while !d.window ne -1 do wdelete, !d.window



    if keyword_set(no_plot) then return
    options, ['fa_','po_']+'dis', 'ytitle', 'R'
    

    ; **** plot 0: field preprocessing (several plots).
    ; done by polar_sdt_prep_poynting_flux.
    ofn = figdir+'/'+id+'/'+strmid(id,0,9)+'_polar_*.pdf'
    tmp = file_search(ofn)
    for i = 0, n_elements(tmp)-1 do if tmp[i] ne '' then file_delete, tmp[i]


    ; **** plot 1: de, db, pf total.
    ; shows the final 3-D de, db, pf, each in common scale.
    ofn = figdir+'/'+id+'/'+id+'_field_and_poynt.pdf'
    sgopen, ofn
    sgindexcolor, ct
    erase
    ; polar.
    vars = 'po_'+['de_fac_mat','db_fac_mat','pf_fac_mat']
    options, vars[0], 'labels', 'dE'+faclabs
    options, vars[0], 'ytitle', '(mV/m)'
    options, vars[1], 'labels', 'dB'+faclabs
    options, vars[1], 'ytitle', '(nT)'
    options, vars[2], 'labels', 'S'+faclabs
    options, vars[2], 'ytitle', '(mW/m!U2!N)'
    for j = 0, n_elements(vars)-1 do begin
        stplot_split, vars[j]
        get_data, vars[j], t0, tmp
        idx = where(t0 ge potr[0] and t0 le potr[1])
        ylim, vars[j]+'_comp?', min(tmp[idx,*]), max(tmp[idx,*])
    endfor
    vars = tnames(vars+'_comp?')
    nvar = n_elements(vars)
    pos = sgcalcpos(nvar, position=posl)
    tplot, vars, var_label = polabs, trange = potr, position = pos, title = 'Polar', /noerase
    timebar, potrcusp, color = red, thick = 2
    store_data, vars, /delete
    ; fast.
    vars = 'fa_'+['de_fac_mat','db_fac_mat','pf_fac_mat']
    ytls = ['dE!C(mV/m)','dB!C(nT)','S!C(mW/m!U2!N)']
    options, vars[0], 'labels', 'dE'+faclabs
    options, vars[0], 'ytitle', '(mV/m)'
    options, vars[1], 'labels', 'dB'+faclabs
    options, vars[1], 'ytitle', '(nT)'
    options, vars[2], 'labels', 'S'+faclabs
    options, vars[2], 'ytitle', '(mW/m!U2!N)'
    for j = 0, n_elements(vars)-1 do begin
        fvars = ''
        stplot_split, vars[j]
        get_data, vars[j], t0, tmp
        idx = where(t0 ge fatr[0] and t0 le fatr[1])
        ylim, vars[j]+'_comp?', min(tmp[idx,*]), max(tmp[idx,*])
    endfor
    vars = vars+'_comp?'
    nvar = n_elements(tnames(vars))
    pos = sgcalcpos(nvar, position=posr)
    tplot, vars, var_label = falabs, trange = fatr, position = pos, title = 'FAST', /noerase
    timebar, fatrcusp, color = red, thick = 2

    xyouts, 0.5, 0.95, /normal, 'Event ID: '+id+'    Total 3-D field and Poynting flux', alignment = 0.5, charsize = 1.25
    store_data, vars, /delete
    sgclose
    

    ; **** plot 2: dE, dB, S in freq bands.
    ; decompose of 3-D fields.
    ofn = figdir+'/'+id+'/'+id+'_field_and_poynt_freq_band.pdf'
    sgopen, ofn, xsize = 9, ysize = 8, /inch
    sgindexcolor
    loadct2, ct
    ymax = 0.90
    ymin = 0.10
    nvar = ponfilt+fanfilt+2
    depos = sgcalcpos(nvar, position = [0.1,ymin,0.3,ymax])
    dbpos = sgcalcpos(nvar, position = [0.4,ymin,0.6,ymax])
    pfpos = sgcalcpos(nvar, position = [0.7,ymin,0.9,ymax])
    erase

    ; polar.
    vars = 'po_'+['de_fac_mat','db_fac_mat','pf_fac_mat']
    options, 'po_de_fac_mat_'+pobandids, 'ytitle', 'dE'
    options, 'po_db_fac_mat_'+pobandids, 'ytitle', 'dB'
    options, 'po_pf_fac_mat_'+pobandids, 'ytitle', 'S'

    ponewbandids = pobandids
    ponewbandlabels = pobandlabels

    ; fac band.
    if pohasfac then begin
        ponewbandids[ponband-1] = 'fac'
        ponewbandlabels[ponband-1] = '>'+sgnum2str(pofaclim,msgn=3)+'s'
        nvar = n_elements(vars)
        for i = 0, nvar-1 do begin
            tvar = vars[i]+'_fac'
            stplot_renew, vars[i]+'_'+pobandids[ponband-1], newname = tvar, /delete
            options, tvar, 'labels', strarr(ndim)+ponewbandlabels[ponband-1]
        endfor
    endif

    podevars = 'po_de_fac_mat_'+ponewbandids
    nvar = n_elements(podevars)
    options, podevars, 'ystyle', 1
    for i = 0, nvar-1 do begin
        get_data, podevars[i], t0, dat
        options, podevars[i], 'yrange', sg_autolim(dat, ntick = ntick)
        options, podevars[i], 'yticks', ntick
    endfor
    pos = depos[*,0:ponfilt-1]
    tplot, podevars, var_label = polabs, trange = potr, position = pos, title = 'Polar dE', /noerase
    timebar, potrcusp, color = red, thick = 2

    podbvars = 'po_db_fac_mat_'+ponewbandids
    nvar = n_elements(podbvars)
    options, podbvars, 'labels', faclabs
    options, podbvars, 'ystyle', 1
    for i = 0, nvar-1 do begin
        get_data, podbvars[i], t0, dat
        options, podbvars[i], 'yrange', sg_autolim(dat, ntick = ntick)
        options, podbvars[i], 'yticks', ntick
    endfor
    pos = dbpos[*,0:ponfilt-1]
    tplot, podbvars, var_label = polabs, trange = potr, position = pos, title = 'Polar dB', /noerase
    timebar, potrcusp, color = red, thick = 2

    popfvars = 'po_pf_fac_mat_'+ponewbandids
    nvar = n_elements(popfvars)
    tmp = info.polar.ebratio
    for i = 0, ponband-1 do begin
        labs = ['dE: '+sgnum2str(tmp[i,1],nsgn=2)+' mV/m', $
            'dB: '+sgnum2str(tmp[i,2],nsgn=2)+' nT', $
            'E/B: '+sgnum2str(tmp[i,0],nsgn=2)+' km/s']
        options, popfvars[i], 'labels', labs
    endfor
    options, 'po_pf_fac_mat_fac', 'labels', labs
    options, popfvars, 'ystyle', 1
    for i = 0, nvar-1 do begin
        get_data, popfvars[i], t0, dat
        options, popfvars[i], 'yrange', sg_autolim(dat, ntick = ntick)
        options, popfvars[i], 'yticks', ntick
    endfor
    pos = pfpos[*,0:ponfilt-1]
    titl = 'Polar S, v!DA!N = '+sgnum2str(info.polar.va,nsgn=2)+' km/s'
    tplot, popfvars, var_label = polabs, trange = potr, position = pos, title = titl, /noerase
    timebar, potrcusp, color = red, thick = 2

    ; fast.
    vars = 'fa_'+['de_fac_mat','db_fac_mat','pf_fac_mat']
    options, 'fa_de_fac_mat_'+fabandids, 'ytitle', 'dE'
    options, 'fa_db_fac_mat_'+fabandids, 'ytitle', 'dB'
    options, 'fa_pf_fac_mat_'+fabandids, 'ytitle', 'S'

    fanewbandids = fabandids
    fanewbandlabels = fabandlabels

    ; fac band.
    if fahasfac then begin
        fanewbandids[fanband-1] = 'fac'
        fanewbandlabels[fanband-1] = '>'+sgnum2str(fafaclim,msgn=3)+'s'
        nvar = n_elements(vars)
        for i = 0, nvar-1 do begin
            tvar = vars[i]+'_fac'
            stplot_renew, vars[i]+'_'+fabandids[fanband-1], newname = tvar, /delete
            options, tvar, 'labels', strarr(ndim)+fanewbandlabels[fanband-1]
        endfor
    endif

    fadevars = 'fa_de_fac_mat_'+fanewbandids
    nvar = n_elements(fadevars)
    options, fadevars, 'ystyle', 1
    for i = 0, nvar-1 do begin
        get_data, fadevars[i], t0, dat
        options, fadevars[i], 'yrange', sg_autolim(dat, ntick = ntick)
        options, fadevars[i], 'yticks', ntick
    endfor
    pos = depos[*,ponfilt+2:*]
    tplot, fadevars, var_label = falabs, trange = fatr, position = pos, title = 'Fast dE', /noerase
    timebar, fatrcusp, color = red, thick = 2

    fadbvars = 'fa_db_fac_mat_'+fanewbandids
    nvar = n_elements(fadbvars)
    options, fadbvars, 'labels', faclabs
    options, fadbvars, 'ystyle', 1
    for i = 0, nvar-1 do begin
        get_data, fadbvars[i], t0, dat
        options, fadbvars[i], 'yrange', sg_autolim(dat, ntick = ntick)
        options, fadbvars[i], 'yticks', ntick
    endfor
    pos = dbpos[*,ponfilt+2:*]
    tplot, fadbvars, var_label = falabs, trange = fatr, position = pos, title = 'Fast dB', /noerase
    timebar, fatrcusp, color = red, thick = 2

    fapfvars = 'fa_pf_fac_mat_'+fanewbandids
    nvar = n_elements(fapfvars)
    tmp = info.fast.ebratio
    for i = 0, fanband-1 do begin
        labs = ['dE: '+sgnum2str(tmp[i,1],nsgn=2)+' mV/m', $
            'dB: '+sgnum2str(tmp[i,2],nsgn=2)+' nT', $
            'E/B: '+sgnum2str(tmp[i,0],nsgn=2)+' km/s']
        options, fapfvars[i], 'labels', labs
    endfor
    options, 'fa_pf_fac_mat_fac', 'labels', labs
    options, fapfvars, 'ystyle', 1
    for i = 0, nvar-1 do begin
        get_data, fapfvars[i], t0, dat
        options, fapfvars[i], 'yrange', sg_autolim(dat, ntick = ntick)
        options, fapfvars[i], 'yticks', ntick
    endfor
    pos = pfpos[*,ponfilt+2:*]
    titl = 'Fast S, v!DA!N = '+sgnum2str(info.fast.va,nsgn=2)+' km/s'
    tplot, fapfvars, var_label = falabs, trange = fatr, position = pos, title = titl, /noerase
    timebar, fatrcusp, color = red, thick = 2


    xyouts, 0.5, 0.95, /normal, 'Event ID: '+id+'    Freq bands of 3-D dE, dB, and Poynting flux', alignment = 0.5, charsize = 1.25
    sgclose
    

    ; **** plot 2': same quantities but in same scale.
    ofn = figdir+'/'+id+'/'+id+'_field_and_poynt_freq_band_scaled.pdf'
    sgopen, ofn, xsize = 9, ysize = 8, /inch
    sgindexcolor
    loadct2, ct
    erase
    
    stplot_minmax, podevars, /set, newname = podevars+'_scaled'
    stplot_minmax, podbvars, /set, newname = podbvars+'_scaled'
    stplot_minmax, popfvars, /set, newname = popfvars+'_scaled'
    stplot_minmax, fadevars, /set, newname = fadevars+'_scaled'
    stplot_minmax, fadbvars, /set, newname = fadbvars+'_scaled'
    stplot_minmax, fapfvars, /set, newname = fapfvars+'_scaled'
    
    nvar = n_elements(podevars)
    pos = depos[*,0:ponfilt-1]
    tplot, podevars+'_scaled', var_label = polabs, trange = potr, position = pos, title = 'Polar dE', /noerase
    timebar, potrcusp, color = red, thick = 2
    pos = dbpos[*,0:ponfilt-1]
    tplot, podbvars+'_scaled', var_label = polabs, trange = potr, position = pos, title = 'Polar dB', /noerase
    timebar, potrcusp, color = red, thick = 2
    pos = pfpos[*,0:ponfilt-1]
    titl = 'Polar S, v!DA!N = '+sgnum2str(info.polar.va,nsgn=2)+' km/s'
    tplot, popfvars+'_scaled', var_label = polabs, trange = potr, position = pos, title = titl, /noerase
    timebar, potrcusp, color = red, thick = 2
    
    nvar = n_elements(fadevars)
    pos = depos[*,ponfilt+2:*]
    tplot, fadevars+'_scaled', var_label = falabs, trange = fatr, position = pos, title = 'FAST dE', /noerase
    timebar, fatrcusp, color = red, thick = 2
    pos = dbpos[*,ponfilt+2:*]
    tplot, fadbvars+'_scaled', var_label = falabs, trange = fatr, position = pos, title = 'FAST dB', /noerase
    timebar, fatrcusp, color = red, thick = 2
    pos = pfpos[*,ponfilt+2:*]
    titl = 'FAST S, v!DA!N = '+sgnum2str(info.fast.va,nsgn=2)+' km/s'
    tplot, fapfvars+'_scaled', var_label = falabs, trange = fatr, position = pos, title = titl, /noerase
    timebar, fatrcusp, color = red, thick = 2
    
    xyouts, 0.5, 0.95, /normal, 'Event ID: '+id+'    Scaled freq bands of 3-D dE, dB, and Poynting flux', alignment = 0.5, charsize = 1.25
    sgclose
    vars = [podevars,podbvars,popfvars,fadevars,fadbvars,fapfvars]+'_scaled'
    store_data, vars, /delete


    ; **** plot 3: energy fluxes, in situ and mapped.
    ; final in situ and mapped KEi, KEe, Spara.
    ofn = figdir+'/'+id+'/'+id+'_efluxes.pdf'
    sgopen, ofn
    sgindexcolor
    loadct2, ct
    erase

    ; polar.
    vars = 'po_'+['ele_keflux','ion_keflux','pf_fac_mat_para']
    tmp = ['KEe','KEi','S!L||!N']+' map!C!C  INT = '
    for i = 0, n_elements(vars)-1 do begin
        get_data, vars[i]+'_map', tmp1, tmp2, dat
        options, vars[i]+'_map', 'labels', tmp[i]+sgnum2str(dat,ndec=0)+' W/m'
    endfor
    vars = [vars,vars+'_map']
    nvar = n_elements(vars)
    pos = sgcalcpos(nvar, position=posl)
    options, vars, 'ytitle', '(mW/m!U2!N)'
    options, vars[0], 'labels', 'KEe'
    options, vars[1], 'labels', 'KEi'
    options, vars[2], 'labels', 'S!L||!N'
    tplot, vars, trange = potr, position = pos, /noerase, var_label = polabs, title = 'Polar'
    timebar, potrcusp, color = red, thick = 2

    ; fast.
    vars = 'fa_'+['ele_keflux','ion_keflux','pf_fac_mat_para']
    tmp = ['KEe','KEi','S!L||!N']+' map!C!C  INT = '
    for i = 0, n_elements(vars)-1 do begin
        get_data, vars[i]+'_map', tmp1, tmp2, dat
        options, vars[i]+'_map', 'labels', tmp[i]+sgnum2str(dat,ndec=0)+' W/m'
    endfor
    vars = [vars,vars+'_map']
    nvar = n_elements(vars)
    pos = sgcalcpos(nvar, position=posr)
    options, vars, 'ytitle', '(mW/m!U2!N)'
    options, vars[0], 'labels', 'KEe'
    options, vars[1], 'labels', 'KEi'
    options, vars[2], 'labels', 'S!L||!N'
    tplot, vars, trange = fatr, position = pos, /noerase, var_label = falabs, title = 'FAST'
    timebar, fatrcusp, color = red, thick = 2

    xyouts, 0.5, 0.95, /normal, 'Event ID: '+id+'    Energy fluxes in situ and mapped', alignment = 0.5, charsize = 1.25
    sgclose
    

    ; **** plot 4: Polar de, db spectrograms, filtered field.
    ; example of decomposition of de and db.
    posde = [0.1,0.10,0.4,0.90]
    posdb = [0.6,0.10,0.9,0.90]
    ofn = figdir+'/'+id+'/'+id+'_mat_spec_polar.pdf'

    sgopen, ofn, xsize = 9, ysize = 6, /inch
    sgindexcolor
    loadct2, ct
    erase

    ; dEv.
    dename = 'po_de_fac'

    ; mat spectrogram of the wanted component.
    stplot_index, dename, deidx, newname = dename+dematsuf
    stplot_mat, dename+dematsuf, scale = potscl, zrange = loginfo.polar.de

    vars = dename+'_mat_'+[ponewbandids,'nl','nh']
    nvar = n_elements(vars)
    for i = 0, nvar-1 do stplot_index, vars[i], deidx, newname = vars[i]+dematsuf

    vars = dename+'_mat_'+[ponewbandids,'nl','nh']
    vars = [dename+dematsuf+['','_mat'],vars+dematsuf]
    options, vars, 'ytitle', '(mV/m)'
    options, vars, 'yticks', 3

    tvar = dename+dematsuf+'_mat'
    options, tvar, 'labels', 'dEv!C  original'
    options, tvar, 'ytitle', 'Period (s)'
    options, tvar, 'ztitle', '(mV/m)'
    options, tvar, 'zticks', 2
    options, dename+'_mat_nl'+dematsuf, 'labels', 'low freq!C  noise'
    options, dename+'_mat_nh'+dematsuf, 'labels', 'high freq!C  noise'
    options, dename+dematsuf, 'labels', 'original!C  dEv'
    tvar = dename+'_mat_'+ponewbandids+dematsuf
    for i = 0, n_elements(tvar)-1 do options, tvar[i], 'labels', ponewbandlabels[i]

    nvar = n_elements(vars)
    pos = sgcalcpos(nvar, position=posde)

    tplot, vars, var_label = polabs, position = pos, /noerase,$
        title = 'Polar dEv', trange = potr

    ; add filter lines to spec.
    plot, [0,1], poinfo.scaleinfo[0:1], /nodata, /noerase, /ylog, $
        position = pos[*,1], yrange = poinfo.scaleinfo[0:1], ystyle = 5, xstyle = 5
    for i = 0, n_elements(pofilts)-1 do $
        plots, [0,1], pofilts[i]*[1,1], color = 255
    timebar, potrcusp, color = red, thick = 2

    store_data, vars, /delete
    
    ; dBp
    dbname = 'po_db_fac'

    ; mat spectrogram of the wanted component.
    stplot_index, dbname, dbidx, newname = dbname+dbmatsuf
    stplot_mat, dbname+dbmatsuf, scale = potscl, zrange = loginfo.polar.db

    vars = dbname+'_mat_'+[ponewbandids,'nl','nh']
    nvar = n_elements(vars)
    for i = 0, nvar-1 do stplot_index, vars[i], dbidx, newname = vars[i]+dbmatsuf

    vars = dbname+'_mat_'+[ponewbandids,'nl','nh']
    vars = [dbname+dbmatsuf+['','_mat'],vars+dbmatsuf]
    options, vars, 'ytitle', '(nT)'
    options, vars, 'yticks', 3

    tvar = dbname+dbmatsuf+'_mat'
    options, tvar, 'labels', 'dBp!C  original'
    options, tvar, 'ytitle', 'Period (s)'
    options, tvar, 'ztitle', '(nT)'
    options, tvar, 'zticks', 2
    options, dbname+'_mat_nl'+dbmatsuf, 'labels', 'low freq!C  noise'
    options, dbname+'_mat_nh'+dbmatsuf, 'labels', 'high freq!C  noise'
    options, dbname+dbmatsuf, 'labels', 'original!C  dBp'
    tvar = dbname+'_mat_'+ponewbandids+dbmatsuf
    for i = 0, n_elements(tvar)-1 do options, tvar[i], 'labels', ponewbandlabels[i]

    nvar = n_elements(vars)
    pos = sgcalcpos(nvar, position=posdb)

    tplot, vars, var_label = polabs, position = pos, /noerase,$
        title = 'Polar dBp', trange = potr

    ; add filter lines to spec.
    plot, [0,1], poinfo.scaleinfo[0:1], /nodata, /noerase, /ylog, $
        position = pos[*,1], yrange = poinfo.scaleinfo[0:1], ystyle = 5, xstyle = 5
    for i = 0, n_elements(pofilts)-1 do $
        plots, [0,1], pofilts[i]*[1,1], color = 255
    timebar, potrcusp, color = red, thick = 2

    store_data, vars, /delete

    xyouts, 0.5, 0.95, /normal, 'Event ID: '+id+'    Polar dEv, dBp decomposition', alignment = 0.5, charsize = 1.25
    sgclose
    

    ; **** plot 4': FAST de, db spectrograms, filtered field.
    ; example of decomposition of de and db.
    posde = [0.1,0.10,0.4,0.90]
    posdb = [0.6,0.10,0.9,0.90]
    ofn = figdir+'/'+id+'/'+id+'_mat_spec_fast.pdf'

    sgopen, ofn, xsize = 9, ysize = 6, /inch
    sgindexcolor
    loadct2, ct
    erase

    ; dEv.
    dename = 'fa_de_fac'

    ; mat spectrogram of the wanted component.
    stplot_index, dename, deidx, newname = dename+dematsuf
    stplot_mat, dename+dematsuf, scale = fatscl, zrange = loginfo.fast.de

    vars = dename+'_mat_'+[fanewbandids,'nl','nh']
    nvar = n_elements(vars)
    for i = 0, nvar-1 do stplot_index, vars[i], deidx, newname = vars[i]+dematsuf

    vars = dename+'_mat_'+[fanewbandids,'nl','nh']
    vars = [dename+dematsuf+['','_mat'],vars+dematsuf]
    options, vars, 'ytitle', '(mV/m)'
    options, vars, 'yticks', 3

    tvar = dename+dematsuf+'_mat'
    options, tvar, 'labels', 'dEv!C  original'
    options, tvar, 'ytitle', 'Period (s)'
    options, tvar, 'ztitle', '(mV/m)'
    options, tvar, 'zticks', 2
    options, dename+'_mat_nl'+dematsuf, 'labels', 'low freq!C  noise'
    options, dename+'_mat_nh'+dematsuf, 'labels', 'high freq!C  noise'
    options, dename+dematsuf, 'labels', 'original!C  dEv'
    tvar = dename+'_mat_'+fanewbandids+dematsuf
    for i = 0, n_elements(tvar)-1 do options, tvar[i], 'labels', fanewbandlabels[i]

    nvar = n_elements(vars)
    pos = sgcalcpos(nvar, position=posde)

    tplot, vars, var_label = falabs, position = pos, /noerase,$
        title = 'Fast dEv', trange = fatr

    ; add filter lines to spec.
    plot, [0,1], fainfo.scaleinfo[0:1], /nodata, /noerase, /ylog, $
        position = pos[*,1], yrange = fainfo.scaleinfo[0:1], ystyle = 5, xstyle = 5
    for i = 0, n_elements(fafilts)-1 do $
        plots, [0,1], fafilts[i]*[1,1], color = 255
    timebar, fatrcusp, color = red, thick = 2

    store_data, vars, /delete

    ; dBp
    dbname = 'fa_db_fac'

    ; mat spectrogram of the wanted component.
    stplot_index, dbname, dbidx, newname = dbname+dbmatsuf
    stplot_mat, dbname+dbmatsuf, scale = fatscl, zrange = loginfo.fast.db

    vars = dbname+'_mat_'+[fanewbandids,'nl','nh']
    nvar = n_elements(vars)
    for i = 0, nvar-1 do stplot_index, vars[i], dbidx, newname = vars[i]+dbmatsuf

    vars = dbname+'_mat_'+[fanewbandids,'nl','nh']
    vars = [dbname+dbmatsuf+['','_mat'],vars+dbmatsuf]
    options, vars, 'ytitle', '(nT)'
    options, vars, 'yticks', 3

    tvar = dbname+dbmatsuf+'_mat'
    options, tvar, 'labels', 'dBp!C  original'
    options, tvar, 'ytitle', 'Period (s)'
    options, tvar, 'ztitle', '(nT)'
    options, tvar, 'zticks', 2
    options, dbname+'_mat_nl'+dbmatsuf, 'labels', 'low freq!C  noise'
    options, dbname+'_mat_nh'+dbmatsuf, 'labels', 'high freq!C  noise'
    options, dbname+dbmatsuf, 'labels', 'original!C  dBp'
    tvar = dbname+'_mat_'+fanewbandids+dbmatsuf
    for i = 0, n_elements(tvar)-1 do options, tvar[i], 'labels', fanewbandlabels[i]

    nvar = n_elements(vars)
    pos = sgcalcpos(nvar, position=posdb)

    tplot, vars, var_label = falabs, position = pos, /noerase,$
        title = 'Fast dBp', trange = fatr

    ; add filter lines to spec.
    plot, [0,1], fainfo.scaleinfo[0:1], /nodata, /noerase, /ylog, $
        position = pos[*,1], yrange = fainfo.scaleinfo[0:1], ystyle = 5, xstyle = 5
    for i = 0, n_elements(fafilts)-1 do $
        plots, [0,1], fafilts[i]*[1,1], color = 255
    timebar, fatrcusp, color = red, thick = 2

    store_data, vars, /delete

    xyouts, 0.5, 0.95, /normal, 'Event ID: '+id+'    Fast dEv, dBp decomposition', alignment = 0.5, charsize = 1.25
    sgclose
    

    ; **** plot 5, FAST ESA.
    mu = '!9'+string(109b)+'!X'
    gamma = '!9'+string(71b)+'!X'
    para = '||'
    perp = '!9'+string(94b)+'!X'
    orb = string(loginfo.fast.orbit,format='(I05)')
    fn = rootdir+'/data/cusp/fa_sdt_esa_'+id+'_'+orb+'.tplot'
    tplot_restore, filename = fn
    get_data, 'fa_dis', t0
    options, ['ion_n','ion_p','ele_n','ele_p'], 'ylog', 1
    vars = ['ion_p','ele_p']
    for i = 0, n_elements(vars)-1 do begin
        get_data, vars[i], t0, tmp
        store_data, vars[i], t0, tmp*1e-8
        options, vars[i], 'ytitle', '(ba)!Ccgs'
    endfor
    coef = 1.6e-9   ; convert # cm^-2 s^-1 to uA m^-2.
    pre = 'ion_'
    vars = pre+['para_spec','perp_spec','anti_spec',$
        'j','eflux','n','p','en_spec','pa_spec']
    fn = shomedir()+'/'+id+'_esa.pdf'
    get_data, 'ele_n', t0, elen
    get_data, 'ion_n', tmp, ionn
    ionn = interpol(ionn, tmp, t0)
    store_data, 'density', t0, [[ionn],[elen]], limits = $
        {labels:['Ni','Ne'], colors:[-1,6], ytitle:'(cm!U-3!N)',ylog:1}
    get_data, 'ele_j', t0, elej
    get_data, 'ion_j', tmp, ionj
    ionj = interpol(ionj, tmp, t0)
    store_data, 'nflux', t0, [[ionj],[elej]], limits = $
        {labels:['Ji','Je'], colors:[-1,6], ytitle:'(!9'+mu+'A/m!U2!N)'}
    vars = ['ion_en_spec','ion_pa_spec','nflux','fa_ion_keflux','fa_ele_keflux', $
        'density','ele_en_spec']
    ofn = figdir+'/'+id+'/'+id+'_esa.pdf'

    sgopen, ofn, xsize = 6, ysize = 8, /inch
    titl = 'Event ID: '+id+'    FAST ESA'
    tplot, vars, trange = fatr, var_label = falabs, title = titl
    timebar, fatrcusp, color = red, thick = 2

    sgclose
    

    ; **** plot 6, footpoint.
    alltr = []
    satnames = ['polar (*,b)','fast (+,r)']
    satcolors = [sgcolor('blue'),sgcolor('red')]
    satsyms = [2,1]     ; [*,+].
    pos = [0.15,0.1,0.85,0.8]
    thick = 2
    ofn = figdir+'/'+id+'/'+id+'_footpoint.pdf'
    sgopen, ofn, xsize = 6, ysize = 3, /inch
    sgtruecolor
    ; determine hemisphere.
    get_data, 'po_ilat', t0, poilat
    if interpol(poilat, t0, potrcusp[0]) ge 0 then begin    ; north hem.
        sgset_map, xrange = [90,270], pos = pos, color = sgcolor('black'), $
            ytickv = [50,60,70,80], ytickpos = 225, yticknudge = [-1.4,-0.4], $
            xtickpos = 47
    endif else begin                                        ; south hem.
        sgset_map, xrange = [90,270], pos = pos, color = sgcolor('black'), $
            ytickv = -[50,60,70,80], ytickpos = 225, yticknudge = [-1.4,-0.4], $
            xtickpos = -47, yrange = [-50,-90]
    endelse
    ; use cusp time, expand 2.5 cusp time on both sides.
    ; polar ilat, mlt.
    j = 0
    dt = 600        ; 10 min.
    get_data, 'po_dis', t0, tmp
    if min(interpol(tmp, t0, potrcusp)) le 2.5 then dt = 120
    tmp = potrcusp
    ttr = 0.5*(tmp[1]+tmp[0])+[-1,1]*(tmp[1]-tmp[0])*2.5
    ttr = ttr-(ttr mod dt) & ttr[1]+= dt
    alltr = [min([ttr,alltr]),max([ttr,alltr])]
    tuts = smkarthm(ttr[0], ttr[1], dt, 'dx')
    get_data, 'po_ilat', t0, tmp
    tilat = interpol(tmp, t0, tuts)
    get_data, 'po_mlt', t0, tmp
    tmlt = interpol(tmp, t0, tuts)*15
    plots, tmlt[0:-2], tilat[0:-2], color = satcolors[j]
    plots, tmlt[0:-2], tilat[0:-2], color = satcolors[j], $
        psym = satsyms[j], symsize = 0.4
    arrow, tmlt[-2], tilat[-2], tmlt[-1], tilat[-1], /data, $
        color = satcolors[j], /solid, thick = thick
    plots, interpol(tmlt, tuts, potrcusp), interpol(tilat, tuts, potrcusp), $
        color = satcolors[j], thick = thick*5
    get_data, 'po_dis', t0, tmp
    tmp = string(interpol(tmp, t0, potrcusp[0]), format='(F3.1)')
    xyouts, 0.6, 0.25, /normal, 'Polar: *, R = '+tmp+' Re', color = satcolors[j]
    ; fast ilat, mlt.
    j = 1
    dt = 60        ; 1 min.
    tmp = fatrcusp
    ttr = 0.5*(tmp[1]+tmp[0])+[-1,1]*(tmp[1]-tmp[0])*2.5
    ttr = ttr-(ttr mod dt) & ttr[1]+= dt
    alltr = [min([ttr,alltr]),max([ttr,alltr])]
    tuts = smkarthm(ttr[0], ttr[1], dt, 'dx')
    get_data, 'fa_ilat', t0, tmp
    tilat = interpol(tmp, t0, tuts)
    get_data, 'fa_mlt', t0, tmp
    tmlt = interpol(tmp, t0, tuts)*15
    plots, tmlt[0:-2], tilat[0:-2], color = satcolors[j]
    plots, tmlt[0:-2], tilat[0:-2], color = satcolors[j], $
        psym = satsyms[j], symsize = 0.4
    arrow, tmlt[-2], tilat[-2], tmlt[-1], tilat[-1], /data, $
        color = satcolors[j], /solid, thick = thick
    plots, interpol(tmlt, tuts, fatrcusp), interpol(tilat, tuts, fatrcusp), $
        color = satcolors[j], thick = thick*5
    tmp = string((fatrcusp[0]-potrcusp[0])/3600d, format='(F4.1)')
    tmp = strtrim(tmp,2)
    xyouts, 0.6, 0.2, /normal, 'FAST: +, dT = '+tmp+' hr', color = satcolors[j]

    xyouts, 0.15, 0.9, /normal, 'Event ID: '+id+'    Footprints of Polar and FAST', charsize = 1.25
    sgclose


    ; **** plot 7: omni, polar, fast overview.
    ofn = figdir+'/'+id+'/'+id+'_overview.pdf'
    sgopen, ofn, xsize = 6, ysize = 8, /inch
    sgindexcolor
    loadct2, ct
    titl = 'Event ID: '+id+'    Summary plot of OMNI, Polar, and FAST'
    plot_polar_fast_summary, stoepoch(alltr,'unix'), /no_delete, title = titl
    sgclose
    
    
; **** output info to console.
    cusp_gen_excel_form, id, /load, test = test
;    print, 'Polar ion ratio: ', info.ratio_ion
;    print, 'Poynting flux ratio: ', info.ratio_pflux
;    print, 'Energy flux ratio: ', info.ratio_eflux
;    
;    print, 'Polar integrated poynt in freq bands (v,p,b): '
;    print, dindgen(ponband)
;    print, info.polar.sv.fs[0:ponband-1]
;    print, info.polar.sp.fs[0:ponband-1]
;    print, info.polar.sb.fs[0:ponband-1]
;    print, 'FAST integrated poynt in freq bands (v,p,b): '
;    print, dindgen(fanband)
;    print, info.fast.sv.fs[0:fanband-1]
;    print, info.fast.sp.fs[0:fanband-1]
;    print, info.fast.sb.fs[0:fanband-1]
end
