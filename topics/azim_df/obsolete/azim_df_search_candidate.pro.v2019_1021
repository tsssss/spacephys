;+
; Get the candidate time ranges based on storm search.
;-

pro azim_df_search_candidate, project=project

    if n_elements(project) eq 0 then project = azim_df_load_project()
    if ~project.haskey('done_find_storm') then azim_df_find_storm, project=project
    if ~project.haskey('done_filter_storm') then azim_df_filter_storm, project=project

    ; Settings for the region of interest.
    the_key = 'filter_storm_setting'
    filter_storm_setting = project[the_key]
    mlt_range = filter_storm_setting.mlt_range
    dis_range = [4.,20]

    storms = project.candidate_storm
    candidate_time_ranges = list()
    min_num_triad = 5.
    min_triad_duration = 60*60.     ; sec.
    triad_section_pad = 0
    time_step = project.time_step
    foreach storm_info, storms do begin
        event_time_range = storm_info.time_range
        event_id = storm_info.id

        lprmsg, 'Processing '+event_id+' ...'
        azim_df_load_basic_data, event_time_range, event_id=event_id, project=project, reset=reset


        foreach region, ['post','pre'] do begin
            the_var = region+'_midn_triad_flag'
            get_data, the_var, uts, flags
            index = where(flags ge min_num_triad, count)
            if count eq 0 then continue
            uts = uts[index]
            time_ranges = time_to_range(uts, time_step=time_step, pad_times=triad_section_pad)
            time_ranges >= event_time_range[0]
            time_ranges <= event_time_range[1]
            durations = time_ranges[*,1]-time_ranges[*,0]
            index = where(durations ge min_triad_duration, count)
            if count eq 0 then continue
            time_ranges = time_ranges[index,*]
            ntime_range = n_elements(time_ranges)/2
            for ii=0, ntime_range-1 do candidate_time_ranges.add, reform(time_ranges[ii,*])
        endforeach
    endforeach

    time_ranges = candidate_time_ranges.toarray()   ; in [N,2]
    ntime_range = n_elements(time_ranges)/2

;---Write result to a file.
    if n_elements(project) eq 0 then project = azim_df_load_project()
    candidate_list = join_path([project.data_dir,'azim_df_candidate.txt'])
    openw, lun, /get_lun, candidate_list
    for ii=0, ntime_range-1 do begin
        printf, lun, strjoin(reform(time_string(time_ranges[ii,*])),' to ')
    endfor
    free_lun, lun

    project['done_search_candidate'] = 1
    project['candidate_suffix'] = fgetbase(candidate_list)
    update_project, project

end



azim_df_search_candidate
end
