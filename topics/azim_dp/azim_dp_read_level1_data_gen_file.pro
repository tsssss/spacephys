;+
; Read r_sm and b_sm for certain probe and time.
;-

pro azim_dp_read_level1_data_gen_file, time, probe=probe, filename=file, test=test

;---Check inputs.
    if n_elements(file) eq 0 then begin
        errmsg = handle_error('No output file ...')
        return
    endif

    if n_elements(probe) eq 0 then begin
        errmsg = handle_error('No input probe ...')
        return
    endif

    if n_elements(time) eq 0 then begin
        errmsg = handle_error('No input time ...')
        return
    endif


;---Constants and settings.
    secofday = constant('secofday')
    errmsg = ''
    xyz = constant('xyz')

    ; Derived settings.
    date = time[0]
    date = date-(date mod secofday)
    time_range = date+[0,secofday]
    prefix = probe+'_'
    probe_info = resolve_probe(probe)


;---Init file.
    out_dir = fgetpath(file)
    if file_test(out_dir,/directory) eq 0 then file_mkdir, out_dir
    data_file = file
    if file_test(data_file) eq 0 then begin
        ginfo = dictionary($
            'TITLE', 'B field and position data for dipolarization study', $
            'TEXT', 'Generated by Sheng Tian at the University of Minnesota' )
        cdf_id = cdf_create(data_file)
        cdf_save_setting, ginfo, filename=cdf_id
    endif else cdf_id = cdf_open(data_file)



;---Common time.
    orbit_time_var = 'orbit_ut'
    if ~cdf_has_var(orbit_time_var, filename=cdf_id) then begin
        orbit_time_step = 60.
        orbit_times = make_bins(time_range+[0,-1]*orbit_time_step, orbit_time_step)
        cdf_save_var, orbit_time_var, value=orbit_times, filename=cdf_id
        setting = dictionary($
            'description', 'ut sec of orbit data', $
            'unit', 'sec', $
            'time_step', orbit_time_step )
        cdf_save_setting, setting, varname=orbit_time_var, filename=cdf_id
    endif

    bfield_time_var = 'bfield_ut'
    if ~cdf_has_var(bfield_time_var, filename=cdf_id) then begin
        bfield_time_step = 10.
        bfield_times = make_bins(time_range+[0,-1]*bfield_time_step, bfield_time_step)
        cdf_save_var, bfield_time_var, value=bfield_times, filename=cdf_id
        setting = dictionary($
            'description', 'ut sec of bfield data', $
            'unit', 'sec', $
            'time_step', bfield_time_step )
        cdf_save_setting, setting, varname=bfield_time_var, filename=cdf_id
    endif

    dummy_time_var = 'dummy_ut'
    if ~cdf_has_var(dummy_time_var, filename=cdf_id) then begin
        dummy_time_step = 10.
        cdf_save_var, dummy_time_var, value=time_range+[0,-1]*dummy_time_step, filename=cdf_id
        setting = dictionary($
            'description', 'ut sec of the time range', $
            'unit', 'sec' )
        cdf_save_setting, setting, varname=dummy_time_var, filename=cdf_id
    endif


;---Read bfield.
    bfield_var = prefix+'b_sm'
    orbit_var = prefix+'r_sm'
    if ~cdf_has_var(bfield_var, filename=cdf_id) then begin
        common_times = cdf_read_var(bfield_time_var, filename=cdf_id)
        time_step = total(common_times[0:1]*[-1,1])
        the_var = prefix+'b_gsm'
        routine_name = probe_info.routine_name+'_read_bfield'

        lprmsg, 'Processing '+time_string(date,tformat='YYYY-MM-DD')+' ...'
        day_time_range = date+[0,secofday]
        day_times = make_bins(day_time_range, time_step)
        del_data, the_var
        if probe_info.routine_name eq 'themis' then begin
            azim_dp_read_themis_bfield, day_time_range, probe=probe_info.probe, errmsg=errmsg
        endif else begin
            call_procedure, routine_name, day_time_range, probe=probe_info.probe, errmsg=errmsg, coord='gsm'
        endelse

        ; Check if have data.
        have_data = 1
        if tnames(the_var) eq '' then begin
            have_data = 0
        endif else begin
            get_data, the_var, the_times
            if n_elements(the_times) le 2 then have_data = 0
        endelse

        ; Get the_data.
        if have_data then begin
            interp_time, the_var, common_times
            vec_gsm = get_var_data(the_var)
            index = where(finite(snorm(vec_gsm)), count)
            if count eq 0 then begin
                have_data = 0
            endif else begin
                the_data = cotran(vec_gsm, common_times, 'gsm2sm')
            endelse
        endif

        if ~have_data then begin
            setting = dictionary($
                'have_data', 0, $
                'depend_0', dummy_time_var)

            foreach var, [bfield_var,orbit_var] do begin
                dummy_data = fltarr(2,3)+!values.f_nan
                cdf_save_var, var, value=float(dummy_data), filename=cdf_id
                cdf_save_setting, setting, varname=var, filename=cdf_id
            endforeach
        endif else begin
            setting = dictionary($
                'have_data', 1, $
                'display_type', 'vector', $
                'short_name', 'B', $
                'unit', 'nT', $
                'coord', 'SM', $
                'coord_labels', xyz, $
                'depend_0', bfield_time_var)

            cdf_save_var, bfield_var, value=float(the_data), filename=cdf_id
            cdf_save_setting, setting, varname=bfield_var, filename=cdf_id
        endelse
    endif


;---Read orbit.
    if ~cdf_has_var(orbit_var, filename=cdf_id) then begin
        common_times = cdf_read_var(orbit_time_var, filename=cdf_id)
        time_step = total(common_times[0:1]*[-1,1])
        the_var = prefix+'r_gsm'
        routine_name = probe_info.routine_name+'_read_orbit'

        lprmsg, 'Processing '+time_string(date,tformat='YYYY-MM-DD')+' ...'
        day_time_range = date+[0,secofday]
        day_times = make_bins(day_time_range, time_step)
        del_data, the_var
        var = call_function(routine_name, day_time_range, probe=probe_info.probe, errmsg=errmsg, coord='gsm')

        ; Check if have data.
        have_data = 1
        if tnames(the_var) eq '' then begin
            have_data = 0
        endif else begin
            get_data, the_var, the_times
            if n_elements(the_times) le 2 then have_data = 0
        endelse

        ; Get the_data.
        if have_data then begin
            interp_time, the_var, common_times
            vec_gsm = get_var_data(the_var)
            index = where(finite(snorm(vec_gsm)), count)
            if count eq 0 then begin
                have_data = 0
            endif else begin
                the_data = cotran(vec_gsm, common_times, 'gsm2sm')
            endelse
        endif

        if ~have_data then begin
            setting = dictionary($
                'have_data', 0, $
                'depend_0', dummy_time_var)

            foreach var, [bfield_var,orbit_var] do begin
                dummy_data = fltarr(2,3)+!values.f_nan
                cdf_save_var, var, value=float(dummy_data), filename=cdf_id
                cdf_save_setting, setting, varname=var, filename=cdf_id
            endforeach
        endif else begin
            setting = dictionary($
                'have_data', 1, $
                'display_type', 'vector', $
                'short_name', 'R', $
                'unit', 'Re', $
                'coord', 'SM', $
                'coord_labels', xyz, $
                'depend_0', orbit_time_var)

            cdf_save_var, orbit_var, value=float(the_data), filename=cdf_id
            cdf_save_setting, setting, varname=orbit_var, filename=cdf_id
        endelse
    endif


;---Clean up.
    cdf_close, cdf_id

end



years = [2019,2014]
probes = [$
    'rbsp'+letters('b'), $
    'th'+letters('e'), $
    'g'+['13','14','15','16','17'], $
    'mms1']

secofday = constant('secofday')
foreach year, years do begin
    year_time_range = time_double(string(year+[0,1],format='(I4)'))
    dates = make_bins(year_time_range, secofday)
    foreach date, dates do begin
        time = date+[0,secofday]
        path = join_path([homedir(),'azim_dp','level1',string(year,format='(I4)')])
        base = 'azim_dp_level1_'+time_string(date,tformat='YYYY_MMDD')+'_v01.cdf'
        file = join_path([path,base])
        foreach probe, probes do begin
            azim_dp_read_level1_data_gen_file, time, probe=probe, filename=file
        endforeach
    endforeach
endforeach
stop

time = time_double('2019-01-01')
probes = ['g14','g13','rbspb','mms1','the']

time = time_double('2014-08-28')
probes = ['g15','g13','rbspb','tha','thd','the']

file = join_path([homedir(),'test.cdf'])
file_delete, file, /allow_nonexistent
foreach probe, probes do begin
    azim_dp_read_level1_data_gen_file, time, probe=probe, filename=file
endforeach


end
