;+
; Read r_sm and b_sm for certain probe and time.
;-

pro azim_dp_read_primitive_data_gen_file, time, probe=probe, filename=file, test=test

;---Check inputs.
    if n_elements(file) eq 0 then begin
        errmsg = handle_error('No output file ...')
        return
    endif

    if n_elements(probe) eq 0 then begin
        errmsg = handle_error('No input probe ...')
        return
    endif

    if n_elements(time) eq 0 then begin
        errmsg = handle_error('No input time ...')
        return
    endif


;---Constants and settings.
    secofday = constant('secofday')
    errmsg = ''
    xyz = constant('xyz')

    ; Derived settings.
    year = double(time_string(time[0],tformat='YYYY'))
    time_range = time_double(string(year+[0,1],format='(I4)'))
    prefix = probe+'_'
    secofday = constant('secofday')
    dates = make_bins(time_range+[0,-1]*secofday, secofday)
    if keyword_set(test) then dates = dates[0:5]

    probe_info = resolve_probe(probe)


;---Init file.
    out_dir = fgetpath(file)
    if file_test(out_dir,/directory) eq 0 then file_mkdir, out_dir
    data_file = file
    if file_test(data_file) eq 0 then begin
        ginfo = dictionary($
            'TITLE', 'B field and position data for dipolarization study', $
            'TEXT', 'Generated by Sheng Tian at the University of Minnesota' )
        cdf_id = cdf_create(data_file)
        cdf_save_setting, ginfo, filename=cdf_id
    endif else cdf_id = cdf_open(data_file)



;---Common time.
    orbit_time_var = 'orbit_ut'
    if ~cdf_has_var(orbit_time_var, filename=cdf_id) then begin
        orbit_time_step = 60.
        orbit_times = make_bins(time_range+[0,-1]*orbit_time_step, orbit_time_step)
        cdf_save_var, orbit_time_var, value=orbit_times, filename=cdf_id
        setting = dictionary($
            'description', 'ut sec of orbit data', $
            'unit', 'sec', $
            'time_step', orbit_time_step )
        cdf_save_setting, setting, varname=orbit_time_var, filename=cdf_id
    endif

    bfield_time_var = 'bfield_ut'
    if ~cdf_has_var(bfield_time_var, filename=cdf_id) then begin
        bfield_time_step = 10.
        bfield_times = make_bins(time_range+[0,-1]*bfield_time_step, bfield_time_step)
        cdf_save_var, bfield_time_var, value=bfield_times, filename=cdf_id
        setting = dictionary($
            'description', 'ut sec of bfield data', $
            'unit', 'sec', $
            'time_step', bfield_time_step )
        cdf_save_setting, setting, varname=bfield_time_var, filename=cdf_id
    endif

    dummy_time_var = 'dummy_ut'
    if ~cdf_has_var(dummy_time_var, filename=cdf_id) then begin
        dummy_time_step = 10.
        cdf_save_var, dummy_time_var, value=time_range+[0,-1]*dummy_time_step, filename=cdf_id
        setting = dictionary($
            'description', 'ut sec of the time range', $
            'unit', 'sec' )
        cdf_save_setting, setting, varname=dummy_time_var, filename=cdf_id
    endif


;---Read orbit.
    orbit_var = prefix+'r_sm'
    if ~cdf_has_var(orbit_var, filename=cdf_id) then begin
        times = cdf_read_var(orbit_time_var, filename=cdf_id)
        time_step = total(times[0:1]*[-1,1])
        r_gsm_var = prefix+'r_gsm'
        ndim = 3
        ntime = n_elements(times)
        r_gsm = fltarr(ntime,ndim)+!values.f_nan
        routine_name = probe_info.routine_name+'_read_orbit'
        foreach date, dates do begin
            lprmsg, 'Processing '+time_string(date,tformat='YYYY-MM-DD')+' ...'
            day_time_range = date+[0,secofday]
            day_times = make_bins(day_time_range, time_step)
            del_data, r_gsm_var
            call_procedure, routine_name, day_time_range, probe=probe_info.probe, errmsg=errmsg, coord='gsm'
            if errmsg ne '' then begin
                lprmsg, 'No data, skip ...'
                continue
            endif
            if tnames(r_gsm_var) eq '' then begin
                lprmsg, 'No data, skip ...'
                continue
            endif
            interp_time, r_gsm_var, day_times
            index = (day_times-time_range[0])/time_step
            r_gsm[index,*] = get_var_data(r_gsm_var)
        endforeach

        index = where(finite(snorm(r_gsm)), count)
        if count eq 0 then begin
            value = !values.f_nan
            setting = dictionary($
                'have_data', 0)
        endif else begin
            value = cotran(r_gsm, times, 'gsm2sm')
            setting = dictionary($
                'have_data', 1, $
                'display_type', 'vector', $
                'short_name', 'B', $
                'unit', 'nT', $
                'coord', 'SM', $
                'coord_labels', xyz, $
                'depend_0', orbit_time_var)
        endelse
        cdf_save_var, orbit_var, value=float(value), filename=cdf_id
        cdf_save_setting, setting, varname=orbit_var, filename=cdf_id
    endif


;---Read bfield.
    bfield_var = prefix+'b_sm'
    if ~cdf_has_var(bfield_var, filename=cdf_id) then begin
        times = cdf_read_var(bfield_time_var, filename=cdf_id)
        time_step = total(times[0:1]*[-1,1])
        b_gsm_var = prefix+'b_gsm'
        ndim = 3
        ntime = n_elements(times)
        b_gsm = fltarr(ntime,ndim)+!values.f_nan
        routine_name = probe_info.routine_name+'_read_bfield'
        foreach date, dates do begin
            lprmsg, 'Processing '+time_string(date,tformat='YYYY-MM-DD')+' ...'
            day_time_range = date+[0,secofday]
            day_times = make_bins(day_time_range, time_step)
            del_data, b_gsm_var
            if probe_info.routine_name eq 'themis' then begin
                azim_dp_read_themis_bfield, day_time_range, probe=probe_info.probe, errmsg=errmsg
            endif else begin
                call_procedure, routine_name, day_time_range, probe=probe_info.probe, errmsg=errmsg, coord='gsm'
            endelse
            if errmsg ne '' then begin
                lprmsg, 'No data, skip ...'
                continue
            endif
            if tnames(b_gsm_var) eq '' then begin
                lprmsg, 'No data, skip ...'
                continue
            endif
            interp_time, b_gsm_var, day_times
            index = (day_times-time_range[0])/time_step
            b_gsm[index,*] = get_var_data(b_gsm_var)
        endforeach

        index = where(finite(snorm(b_gsm)), count)
        if count eq 0 then begin
            value = !values.f_nan
            setting = dictionary($
                'have_data', 0)
        endif else begin
            value = cotran(b_gsm, times, 'gsm2sm')
            setting = dictionary($
                'have_data', 1, $
                'display_type', 'vector', $
                'short_name', 'B', $
                'unit', 'nT', $
                'coord', 'SM', $
                'coord_labels', xyz, $
                'depend_0', bfield_time_var)
        endelse
        cdf_save_var, bfield_var, value=float(value), filename=cdf_id
        cdf_save_setting, setting, varname=bfield_var, filename=cdf_id
    endif

;---Clean up.
    var_att = cdf_read_var_att(bfield_var, filename=cdf_id)
    if ~var_att.haskey('have_data') then begin
        have_data = 0
    endif else begin
        have_data = var_att.have_data
    endelse

    ndim = 3
    if ~have_data then begin
        dummy = fltarr(2,ndim)+!values.f_nan
        setting = dictionary($
            'have_data', 0, $
            'display_type', 'vector', $
            'short_name', 'R', $
            'unit', 'Re', $
            'coord', 'SM', $
            'coord_labels', xyz, $
            'depend_0', dummy_time_var)
        cdf_del_var, orbit_var, filename=cdf_id
        cdf_save_var, orbit_var, value=float(dummy), filename=cdf_id
        cdf_save_setting, setting, varname=orbit_var, filename=cdf_id

        dummy = fltarr(2,ndim)+!values.f_nan
        setting = dictionary($
            'have_data', 0, $
            'display_type', 'vector', $
            'short_name', 'B', $
            'unit', 'nT', $
            'coord', 'SM', $
            'coord_labels', xyz, $
            'depend_0', dummy_time_var)
        cdf_del_var, bfield_var, filename=cdf_id
        cdf_save_var, bfield_var, value=float(dummy), filename=cdf_id
        cdf_save_setting, setting, varname=bfield_var, filename=cdf_id
    endif


    cdf_close, cdf_id

end


;stop
years = [2009,2008,2007]
probes = ['rbsp'+letters('b'), $
    'th'+letters('e'), 'mms1', $
    'g'+['13','14','15']]


years = [2019]
probes = ['g'+['16']]

years = string(years,format='(I4)')
foreach year, years do begin
    time = time_double(year)
    path = join_path([homedir(),'azim_dp','primitive_data'])
    base = 'azim_dp_'+year+'_primitive_data_v01.cdf'
    file = join_path([path,base])
    foreach probe, probes do begin
        azim_dp_read_primitive_data_gen_file, time, probe=probe, filename=file
    endforeach
endforeach
stop

time = time_double('2019-01-01')
file = join_path([homedir(),'test.cdf'])
file_delete, file, /allow_nonexistent
foreach probe, ['g14','g13','rbspb','mms1','the'] do $
    azim_dp_read_primitive_data_gen_file, time, probe=probe, filename=file, test=1
end
