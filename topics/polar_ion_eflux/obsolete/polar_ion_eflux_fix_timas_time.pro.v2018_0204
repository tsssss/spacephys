;+
; Fix Timas epoch. Default is on universal time.
;-

function polar_ion_eflux_fix_timas_time, ut0s, epoch=epoch

    uts = ut0s
    if keyword_set(epoch) then uts = sfmepoch(ut0s,'unix')

;---Settings.
    dr0 = 12d
    ddr = 3d
    maxdt = 60  ; sec.

    

;---Preparations.
    uts = ut0s
    nrec = n_elements(uts)
    
    ; fix nan.
    idx = where(~finite(uts,/nan), cnt)
    tmp = findgen(nrec)
    uts = interpol(uts[idx],tmp[idx],tmp)
    
    dt0s = (uts-shift(uts,1))[1:*]  ; n-1 # of rec, dt0s = dt1s+ddts+dt1s.
    ddts = round(dt0s/dr0)*dr0      ; the bg of multiple of dr0.
    dt2s = dt0s-ddts
    dt1s = round(dt2s)              ; the rounded fluctuation.
    tdts = dt2s-dt1s                ; the small deviation.

   
;---fix dt1s, but make a copy of it.
    dt2s = dt1s
    
    ; case 1: 3-3-6 spikes. conserve time separation.
    idx = where(abs(dt2s) eq 6, cnt)
    for i=0, cnt-1 do begin
        ti = idx[i]
        if ti-1 le 0 then continue
        if ti+1 ge nrec-2 then continue
        if dt2s[ti-1] ne dt2s[ti]*0.5 then continue
        if dt2s[ti+1] ne dt2s[ti]*0.5 then continue
        dt2s[ti-1] = 0
        dt2s[ti+1] = 0
        dt2s[ti] *= 2
    endfor
    
    ; case 2: 2-point bipolar spikes. conserve time separation.
    for i=0, nrec-3 do begin
        if dt2s[i] eq 0 then continue
        if dt2s[i]*dt2s[i+1] ge 0 then continue
        dt2s[i:i+1] = mean(dt2s[i:i+1])
        i = i+1
    endfor
    
    ; case 3: 3-point bipolar spikes. conserve time separation.
    for i=0, nrec-4 do begin
        if dt2s[i] eq 0 then continue
        if dt2s[i]*dt2s[i+2] ge 0 then continue
        if dt2s[i+1] ne 0 then continue
        dt2s[i:i+2] = mean(dt2s[i:i+2])
        i = i+2
    endfor
    
    ; if there are only a few weird points left, wipe them out.
    idx = where(dt2s ne 0 and abs(dt2s) ne dr0, cnt)
    dt3s = dt2s
    dt3s[idx] = 0
    if total(dt2s)-total(dt2s) le maxdt then dt2s = dt3s
    
    
;---Recover the times.
    dt3s = dt2s+ddts+tdts
    ut1s = ut0s
    for i=0,nrec-2 do ut1s[i+1] = ut1s[i]+dt3s[i]

    if keyword_set(epoch) then ut1s = stoepoch(ut1s,'unix')
    return, ut1s
 
end
