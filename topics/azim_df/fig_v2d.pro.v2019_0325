;+
; For the v_triad determined for all events:
;   Plot the direction and magnitude.
;-


test = 0
    magnify = (keyword_set(test))? 2: 1

    if n_elements(project) eq 0 then project = azim_df_load_project()
    events = azim_df_load_coherent_events(project=project)
    ;events = azim_df_filter_azim(events, project=project)

    ;v_hat = list()
    v_phi = list()
    v_mlt = list()
    v_mag = list()
    v_rxy = list()
    foreach event, events do begin
        timing_info = event.timing_info['df_time']
        combos = timing_info.triad_timing
        good_triad_flags = timing_info.good_triad_flags
        foreach key, combos.keys(), ii do begin
            combo = combos[key]
            if good_triad_flags[ii] eq 0 then continue
            ;v_hat.add, combo.v_hat
            v_mag.add, combo.v_mag
            r_sm = [combo.center_rsm[0:1],0]
            v_rxy.add, snorm(r_sm)
            v_mlt.add, azim_df_calc_pseudo_mlt(r_sm)
            v_phi.add, atan(combo.v_hat[1],combo.v_hat[0])
        endforeach
    endforeach

    v_phi = v_phi.toarray()*constant('deg')
    v_mlt = v_mlt.toarray()
    v_mag = v_mag.toarray()
    v_rxy = v_rxy.toarray()


    fig_xsize = 5
    fig_ysize = 3
    file = join_path([project.plot_dir,'fig_v2d.pdf'])
    if keyword_set(test) then file = 0
    sgopen, file, xsize=fig_xsize, ysize=fig_ysize, /inch, magnify=magnify
    margins = [7,4,2,2]
    poss = sgcalcpos(1, margins=margins, xchsz=xchsz, ychsz=ychsz)

    label_size = constant('label_size')
    xticklen_chsz = -0.3
    yticklen_chsz = -0.5

;---Panel a. Direction.
    tpos = poss
    xticklen = xticklen_chsz*ychsz/(tpos[3]-tpos[1])
    yticklen = yticklen_chsz*xchsz/(tpos[2]-tpos[0])

    xrange = [-1,1]*9
    xstep = 3
    xtickv = make_bins(xrange, xstep, /inner)
    xticks = n_elements(xtickv)-1
    xminor = 3
    xtitle = 'MLT (hr)'

    yrange = [-1,1]*180
    yticks = 4
    ytickv = smkarthm(yrange[0], yrange[1], yticks+1, 'n')
    yticks = n_elements(ytickv)-1
    yminor = 3
    ytitle = tex2str('phi')+' (deg)'

;---Set up coord.
    plot, xrange, yrange, $
        xstyle=5, xrange=xrange, xticks=xticks, xtickv=xtickv, xminor=xminor, xticklen=xticklen, xtitle=xtitle, $
        ystyle=5, yrange=yrange, yticks=yticks, ytickv=ytickv, yminor=yminor, yticklen=yticklen, ytitle=ytitle, $
        position=tpos, /nodata, /noerase


;---3 schemes.
    schemes = orderedhash($
        'azim.away.midn', dictionary($
            'pre_mlt', [-12.,0], $
            'pre_phi', [-90.,90], $
            'post_mlt', [-0.,12], $
            'post_phi', [-90.,90], $
            'color', sgcolor('blue')), $
         'azim.to.midn', dictionary($
            'pre_mlt', [0.,6], $
            'pre_phi', [90.,180], $
            'post_mlt', [-6,0], $
            'post_phi', [-180.,-90], $
            'color', sgcolor('light_blue')), $
        'radial.in', dictionary($
            'pre_mlt', [-12.,0], $
            'pre_phi', [-180.,0], $
            'post_mlt', [0.,12], $
            'post_phi', [0.,180], $
            'color', sgcolor('green')), $
        'sunward', dictionary($
            'pre_mlt', [-12.,0], $
            'pre_phi', [0.,0], $
            'post_mlt', [0.,12], $
            'post_phi', [0.,0], $
            'color', sgcolor('red')))

    linestyle = 0
    thick = (keyword_set(test))? 2: 8
    foreach scheme, schemes do begin
        color = scheme.color
        foreach key, ['pre','post'] do begin
            txs = scheme[key+'_mlt']
            tys = scheme[key+'_phi']
            oplot, txs,tys, linestyle=linestyle, color=color
        endforeach
    endforeach

;---Plot all data.
    plots, v_mlt, v_phi, psym=1, symsize=label_size*0.5


;---Add labels.
    full_ychsz = constant('full_ychsz')
    tx_label = tpos[0]+xchsz*1
    ty_label = tpos[3]-ychsz*full_ychsz
    foreach key, schemes.keys(), ii do begin
        color = schemes[key].color
        tx = tx_label
        ty = ty_label-ychsz*full_ychsz*ii
        xyouts, tx,ty,/normal, key, color=color, charsize=label_size
    endforeach



;---Add axes.
    plot, xrange, yrange, $
        xstyle=1, xrange=xrange, xticks=xticks, xtickv=xtickv, xminor=xminor, xticklen=xticklen, xtitle=xtitle, $
        ystyle=1, yrange=yrange, yticks=yticks, ytickv=ytickv, yminor=yminor, yticklen=yticklen, ytitle=ytitle, $
        position=tpos, /nodata, /noerase

    tx = tpos[0]-xchsz*0
    ty = tpos[3]+ychsz*0.6
    xyouts, tx,ty,/normal, 'd. v!D2D!N direction vs MLT'



    if keyword_set(test) then stop
    sgclose

end
