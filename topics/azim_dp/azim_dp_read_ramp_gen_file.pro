;+
; Read theta and identify ramp.
;-

pro azim_dp_read_ramp_gen_file_no_data, cdf_id, prefix

    have_data = 0
    ramp_time_var = prefix+'ramp_time'
    ramp_width_var = prefix+'ramp_width'
    dummy_time_var = 'dummy_ut'
    dummy_times = cdf_read_var(dummy_time_var, filename=cdf_id)
    nramp = n_elements(dummy_times)
    dummy_value = fltarr(nramp)+!values.f_nan

    setting = dictionary($
        'description', 'ut sec of the ramp', $
        'unit', 'sec' )
    cdf_save_var, ramp_time_var, value=dummy_times, filename=cdf_id
    cdf_save_setting, setting, varname=ramp_time_var, filename=cdf_id

    setting = dictionary($
        'have_data', have_data, $
        'description', 'width of the ramp', $
        'unit', 'sec', $
        'depend_0', ramp_time_var )
    cdf_save_var, ramp_width_var, value=dummy_value, filename=cdf_id
    cdf_save_setting, setting, varname=ramp_width_var, filename=cdf_id
    
    
    ramp_time_range = dblarr(nramp,2)+!values.d_nan
    ramp_theta_range = fltarr(nramp,2)+!values.f_nan
    ramp_height = fltarr(nramp)+!values.f_nan
    ramp_r_sm = fltarr(nramp, 3)+!values.f_nan
    ramp_mlt = fltarr(nramp)+!values.f_nan


    the_var = prefix+'ramp_time_range'
    value = ramp_time_range
    setting = dictionary($
        'have_data', have_data, $
        'description', 'time range of the ramp', $
        'unit', 'sec', $
        'depend_0', ramp_time_var )
    cdf_save_var, the_var, value=value, filename=cdf_id
    cdf_save_setting, setting, varname=the_var, filename=cdf_id
    
    
    the_var = prefix+'ramp_theta_range'
    value = ramp_theta_range
    setting = dictionary($
        'have_data', have_data, $
        'description', 'theta range of the ramp', $
        'unit', 'deg', $
        'depend_0', ramp_time_var )
    cdf_save_var, the_var, value=value, filename=cdf_id
    cdf_save_setting, setting, varname=the_var, filename=cdf_id
    
    the_var = prefix+'ramp_height'
    value = ramp_height
    setting = dictionary($
        'have_data', have_data, $
        'description', 'height of the ramp', $
        'unit', 'deg', $
        'depend_0', ramp_time_var )
    cdf_save_var, the_var, value=value, filename=cdf_id
    cdf_save_setting, setting, varname=the_var, filename=cdf_id
    
    the_var = prefix+'ramp_r_sm'
    value = ramp_r_sm
    setting = dictionary($
        'have_data', have_data, $
        'description', 'R SM of the ramp', $
        'unit', 'Re', $
        'coord', 'SM', $
        'depend_0', ramp_time_var )
    cdf_save_var, the_var, value=value, filename=cdf_id
    cdf_save_setting, setting, varname=the_var, filename=cdf_id
    
    the_var = prefix+'ramp_mlt'
    value = ramp_mlt
    setting = dictionary($
        'have_data', have_data, $
        'description', 'MLT of the ramp', $
        'unit', 'hr', $
        'depend_0', ramp_time_var )
    cdf_save_var, the_var, value=value, filename=cdf_id
    cdf_save_setting, setting, varname=the_var, filename=cdf_id

    cdf_close, cdf_id
end

pro azim_dp_read_ramp_gen_file, time, probe=probe, filename=file, test_time=test_time



;---Check inputs.
    if n_elements(file) eq 0 then begin
        errmsg = handle_error('No output file ...')
        return
    endif

    if n_elements(probe) eq 0 then begin
        errmsg = handle_error('No input probe ...')
        return
    endif

    if n_elements(time) eq 0 then begin
        errmsg = handle_error('No input time ...')
        return
    endif


;---Constants and settings.
    secofday = constant('secofday')
    errmsg = ''
    xyz = constant('xyz')

    ; Settings.
    boxcar_window = 120.    ; sec.
    boxcar_ratio = 0.8      ; #.
    dtheta_nsigma = 1.      ; to select significant peaks of positive slope.
    df_min_duration = 60.   ; sec.
    pdyn = 10.              ; nPa.
    rxy_range = [4.,30]     ; Re.
    mlt_range = [-1,1]*13   ; hour.
    roi_min_duration = 3600.    ; sec.
    tab = '    '

    ; Derived settings.
    date = time[0]
    date = date-(date mod secofday)
    day_time_range = date+[0,secofday]
    data_time_range = day_time_range+[-1,1]*roi_min_duration
    prefix = probe+'_'


;---Init file.
    out_dir = fgetpath(file)
    if file_test(out_dir,/directory) eq 0 then file_mkdir, out_dir
    data_file = file
    if file_test(data_file) eq 0 then begin
        ginfo = dictionary($
            'TITLE', 'Ramp (increase of tilt angle) for dipolarization study', $
            'TEXT', 'Generated by Sheng Tian at the University of Minnesota' )
        cdf_id = cdf_create(data_file)
        cdf_save_setting, ginfo, filename=cdf_id
    endif else cdf_id = cdf_open(data_file)


    dummy_time_var = 'dummy_ut'
    if ~cdf_has_var(dummy_time_var, filename=cdf_id) then begin
        dummy_time_step = 10.
        cdf_save_var, dummy_time_var, value=day_time_range+[0,-1]*dummy_time_step, filename=cdf_id
        setting = dictionary($
            'description', 'ut sec of the time range', $
            'unit', 'sec' )
        cdf_save_setting, setting, varname=dummy_time_var, filename=cdf_id
    endif
    dummy_times = cdf_read_var(dummy_time_var, filename=cdf_id)
    ndummy_time = n_elements(dummy_times)



;---Load data.
    azim_dp_read_theta, data_time_range, probe=probe, errmsg=errmsg
    theta_var = prefix+'theta'
    get_data, theta_var, times
    if n_elements(times) le 2 then begin
        azim_dp_read_ramp_gen_file_no_data, cdf_id, prefix
        return
    endif

    azim_dp_read_orbit, data_time_range, probe=probe, errmsg=errmsg
    r_sm_var = prefix+'r_sm'
    get_data, r_sm_var, times
    if n_elements(times) le 2 then begin
        azim_dp_read_ramp_gen_file_no_data, cdf_id, prefix
        return
    endif

    azim_dp_read_mlt, data_time_range, probe=probe, errmsg=errmsg
    mlt_var = prefix+'mlt'
    get_data, mlt_var, times
    if n_elements(times) le 2 then begin
        azim_dp_read_ramp_gen_file_no_data, cdf_id, prefix
        return
    endif

    interp_time, r_sm_var, to=theta_var
    interp_time, mlt_var, to=theta_var
    get_data, theta_var, common_times



;---Remove data outside ROI.
    roi_flags = bytarr(n_elements(common_times))+1

    ; Magnetopause.
    r_var = prefix+'r_sm'
    interp_time, r_var, common_times
    r_sm = get_var_data(r_var)
    r_gsm = cotran(r_sm, common_times, 'sm2gsm')
    index = where(check_if_in_magn(r_gsm, dynamic_pressure=pdyn) eq 0, count)
    if count ne 0 then roi_flags[index] = 0

    ; Rxy.
    rxy = snorm(r_sm[*,0:1])
    index = lazy_where(rxy, '][', rxy_range, count=count)
    if count ne 0 then roi_flags[index] = 0

    ; MLT.
    mlt_var = prefix+'mlt'
    interp_time, mlt_var, common_times
    mlt = get_var_data(mlt_var)
    index = lazy_where(mlt, '][', mlt_range, count=count)
    if count ne 0 then roi_flags[index] = 0

    ; Overall index.
    index = where(roi_flags eq 1, count)
    if count eq 0 then begin
        errmsg = 'No data in ROI ...'
        azim_dp_read_ramp_gen_file_no_data, cdf_id, prefix
        return
    endif

    ; Time in ROI.
    roi_times = common_times[index]
    time_step = total(common_times[0:1]*[-1,1])
    roi_time_ranges = time_to_range(roi_times, time_step=time_step)
    roi_durations = roi_time_ranges[*,1]-roi_time_ranges[*,0]
    index = where(roi_durations ge roi_min_duration, count)
    if count eq 0 then begin
        e_mgse = 'No data in ROI for long enough ...'
        azim_dp_read_ramp_gen_file_no_data, cdf_id, prefix
        return
    endif
    roi_time_ranges = roi_time_ranges[index,*]
    nroi_time_range = n_elements(roi_time_ranges)*0.5

;---Detect ramp.
    boxcar_width = boxcar_window/time_step
    ramp_list = list()
    for roi_id=0,nroi_time_range-1 do begin
        roi_time_range = reform(roi_time_ranges[roi_id,*])
        lprmsg, 'Processing ROI section '+strjoin(time_string(roi_time_range),' to ')+' ...'

        ; Load data.
        theta_var = prefix+'theta'
        azim_df_smooth_theta, theta_var, roi_time_range, smooth_window=boxcar_window, stat_ratio=boxcar_ratio
        theta = get_var_data(theta_var, in=roi_time_range, times=times)
        theta_smooth_combo_var = theta_var+'_smooth_combo'


        tmp = get_var_data(theta_smooth_combo_var)
        theta_smooth = tmp[*,0]
        theta_stddev = tmp[*,1]
        dtheta = tmp[*,2]
        dtheta_stddev = tmp[*,3]
        if keyword_set(test_time) then begin
            theta_combo_var = prefix+'theta_combo'
            store_data, theta_combo_var, times, [[theta],[theta_smooth],[theta_stddev],[-theta_stddev]], $
                limits={ytitle:'(deg)',labels:tex2str('theta')+['orig',' smooth',' upper', ' lower'],colors:sgcolor(['silver','red','tan','tan'])}

            dtheta_combo_var = prefix+'dtheta_combo'
            store_data, dtheta_combo_var, times, [[dtheta],[dtheta_stddev*dtheta_nsigma]], $
                limits={ytitle:'(deg/sec)',labels:'d'+tex2str('theta')+['',' stddev'+tex2str('times')+string(dtheta_nsigma,format='(I0)')],colors:sgcolor(['black','blue'])}

            theta_int = fltarr(n_elements(times))
            foreach time, times, time_id do begin
                if time_id eq 0 then continue
                tdtheta = theta[time_id-1]
                if ~finite(tdtheta) then tdtheta = 0
                theta_int[time_id] = theta_int[time_id-1]+tdtheta
            endforeach
            store_data, prefix+'theta_int', times, theta_int-smooth(theta_int, 120, /edge_mirror)
        endif


        ; Pick out the times when dtheta has significant peaks.
        system_error = 1e-3     ; To account for truncation error.
        index = where(dtheta gt dtheta_stddev*dtheta_nsigma+system_error, count)
        if count eq 0 then begin
            lprmsg, tab+tab+'No ramp with significant positive slope ...'
        endif
        time_ranges = time_to_range(times[index], time_step=time_step)
        time_ranges = times[time_to_range(index, time_step=1)]
        durations = time_ranges[*,1]-time_ranges[*,0]
        index = where(durations gt df_min_duration, ntime_range)
        if ntime_range eq 0 then begin
            lprmsg, tab+tab+'No ramp lasts long enough ...'
        endif
        time_ranges = time_ranges[index,*]


        ; Pick out the ramps that have nodes.
        for ii=0, ntime_range-1 do begin
            the_time_range = reform(time_ranges[ii,*])

            ; Exclude the time ranges that are on the edges.
            if (the_time_range[0]-roi_time_range[0]) le boxcar_window then continue
            if (roi_time_range[1]-the_time_range[1]) le boxcar_window then continue

            ; Find if there is a node.
            index = lazy_where(times, '[]', the_time_range, count=npoint)
            min_value_index = index[0]
            max_value_index = index[npoint-1]
            min_value = theta_smooth[min_value_index]
            max_value = theta_smooth[max_value_index]
            min_value_stddev = theta_stddev[min_value_index]
            max_value_stddev = theta_stddev[max_value_index]
            if min_value ge  min_value_stddev then continue
            if max_value le -max_value_stddev then continue
            if (max_value-min_value) le (min_value_stddev+max_value_stddev) then continue   ; value change is too small.
            theta_range = [min_value, max_value]

            ramp_time = mean(the_time_range)
            width = total(the_time_range*[-1,1])
            height = total(theta_range*[-1,1])
            ramp_r_sm = get_var_data(prefix+'r_sm', at=ramp_time)

            the_ramp = dictionary($
                'probe', probe, $
                'time_range', the_time_range, $
                'theta_range', theta_range, $
                'ramp_time', ramp_time, $
                'ramp_r_sm', ramp_r_sm, $
                'width', width, $
                'height', height)
            ramp_list.add, the_ramp

;            the_ramp = dictionary($
;                'probe', probe, $
;                'time_range', the_time_range, $
;                'value_range', theta_range, $
;                'obs_time', ramp_time, $
;                'obs_r_sm', ramp_r_sm, $
;                'width', width, $
;                'height', height)
;            azim_df_ramp_write, the_ramp, filename=out_file

            if keyword_set(test_time) then begin
                vars = [theta_combo_var,dtheta_combo_var,prefix+'theta_int']
                nvar = n_elements(vars)
                poss = sgcalcpos(nvar)

                theta_combo = get_var_data(theta_combo_var, times=times)
                theta_smooth = theta_combo[*,1]
                yrange = minmax(theta_combo)
                options, theta_combo_var, 'yrange', yrange
                options, theta_combo_var, 'ystyle', 1

                the_time_range = the_ramp.time_range
                test_time_range = the_time_range+[-1,1]*the_ramp.width*3
                test_time_range >= roi_time_range[0]
                test_time_range <= roi_time_range[1]
                tplot, vars, trange=test_time_range, position=poss

                tpos = poss[*,0]
                plot, test_time_range, yrange, position=tpos, $
                    xstyle=5, $
                    ystyle=5, $
                    /noerase, /nodata
                index = lazy_where(times, '[]', the_time_range)
                xxs = times[index]
                yys = theta_smooth[index]
                plots, xxs,yys, color=sgcolor('green'), thick=2
                stop
            endif
        endfor; Done loop time_ranges.
    endfor; Done loop roi_time_ranges.



;---Coerce to data.
    ramp_time_var = prefix+'ramp_time'
    ramp_width_var = prefix+'ramp_width'
    nramp = ramp_list.length
    have_data = 0
    if nramp ne 0 then begin
        ramp_times = dblarr(nramp)
        ramp_widths = fltarr(nramp)
        foreach ramp, ramp_list, ramp_id do begin
            ramp_times[ramp_id] = ramp.ramp_time
            ramp_widths[ramp_id] = ramp.width
        endforeach
        index = lazy_where(ramp_times, '[)', day_time_range, count=nramp)
        if nramp ne 0 then begin
            ramp_times = ramp_times[index]
            ramp_widths = ramp_widths[index]
            ramp_list = ramp_list[index]
            have_data = 1
        endif
    endif

    if have_data eq 0 then begin
        have_data = 0
        ramp_times = dummy_times
        ramp_widths = fltarr(ndummy_time)+!values.f_nan
    endif

    setting = dictionary($
        'description', 'ut sec of the ramp', $
        'unit', 'sec' )
    cdf_save_var, ramp_time_var, value=ramp_times, filename=cdf_id
    cdf_save_setting, setting, varname=ramp_time_var, filename=cdf_id

    setting = dictionary($
        'have_data', have_data, $
        'description', 'width of the ramp', $
        'unit', 'sec', $
        'depend_0', ramp_time_var )
    cdf_save_var, ramp_width_var, value=ramp_widths, filename=cdf_id
    cdf_save_setting, setting, varname=ramp_width_var, filename=cdf_id

    if have_data then begin
        ramp_times = cdf_read_var(ramp_time_var, filename=cdf_id)
        ramp_widths = cdf_read_var(ramp_width_var, filename=cdf_id)
        nramp = n_elements(ramp_times)

        ; Time range.
        ramp_time_range = dblarr(nramp,2)
        ramp_time_range[*,0] = ramp_times-ramp_widths*0.5
        ramp_time_range[*,1] = ramp_times+ramp_widths*0.5

        ; Value range.
        ramp_theta_range = fltarr(nramp,2)
        foreach ramp, ramp_list, ramp_id do ramp_theta_range[ramp_id,*] = ramp.theta_range

        ; Height.
        ramp_height = ramp_theta_range[*,1]-ramp_theta_range[*,0]

        ; R SM.
        ramp_r_sm = fltarr(nramp, 3)
        foreach ramp, ramp_list, ramp_id do ramp_r_sm[ramp_id,*,*] = ramp.ramp_r_sm
        
        ; MLT.
        ramp_mlt = get_var_data(prefix+'mlt', at=ramp_times)
    endif else begin
        nramp = 2
        ramp_time_range = dblarr(nramp,2)+!values.d_nan
        ramp_theta_range = fltarr(nramp,2)+!values.f_nan
        ramp_height = fltarr(nramp)+!values.f_nan
        ramp_r_sm = fltarr(nramp, 3)+!values.f_nan
        ramp_mlt = fltarr(nramp)+!values.f_nan
    endelse


    the_var = prefix+'ramp_time_range'
    value = ramp_time_range
    setting = dictionary($
        'have_data', have_data, $
        'description', 'time range of the ramp', $
        'unit', 'sec', $
        'depend_0', ramp_time_var )
    cdf_save_var, the_var, value=value, filename=cdf_id
    cdf_save_setting, setting, varname=the_var, filename=cdf_id


    the_var = prefix+'ramp_theta_range'
    value = ramp_theta_range
    setting = dictionary($
        'have_data', have_data, $
        'description', 'theta range of the ramp', $
        'unit', 'deg', $
        'depend_0', ramp_time_var )
    cdf_save_var, the_var, value=value, filename=cdf_id
    cdf_save_setting, setting, varname=the_var, filename=cdf_id

    the_var = prefix+'ramp_height'
    value = ramp_height
    setting = dictionary($
        'have_data', have_data, $
        'description', 'height of the ramp', $
        'unit', 'deg', $
        'depend_0', ramp_time_var )
    cdf_save_var, the_var, value=value, filename=cdf_id
    cdf_save_setting, setting, varname=the_var, filename=cdf_id

    the_var = prefix+'ramp_r_sm'
    value = ramp_r_sm
    setting = dictionary($
        'have_data', have_data, $
        'description', 'R SM of the ramp', $
        'unit', 'Re', $
        'coord', 'SM', $
        'depend_0', ramp_time_var )
    cdf_save_var, the_var, value=value, filename=cdf_id
    cdf_save_setting, setting, varname=the_var, filename=cdf_id
    
    the_var = prefix+'ramp_mlt'
    value = ramp_mlt
    setting = dictionary($
        'have_data', have_data, $
        'description', 'MLT of the ramp', $
        'unit', 'hr', $
        'depend_0', ramp_time_var )
    cdf_save_var, the_var, value=value, filename=cdf_id
    cdf_save_setting, setting, varname=the_var, filename=cdf_id


;---Clean up.
    cdf_close, cdf_id

end


file = join_path([homedir(),'test.cdf'])
file_delete, file, /allow_nonexistent
date = time_double('2014-08-28')
probes = ['tha','thd','the']
probes = ['tha']
probes = ['mms1','g16','the']
test_time = time_double('2014-08-28/10:22')
test_time = !null


time_range = time_double(['2019-08-05','2019-08-06'])
probes = ['rbspa']
    
foreach probe, probes do azim_dp_read_ramp_gen_file, date, probe=probe, filename=file, test_time=test_time
stop

end
